{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DashPad","text":"<p>A modular system monitoring solution designed to repurpose old tablets as dedicated system metrics displays.</p> <p>Or, if you prefer something with a bit more flair: </p> <p>Don't let your old iPad or tablet become superannuated (what a word!)\u2014repurpose it with DashPad!</p> <p></p> <p>IMPORTANT NOTE</p> <p>As of July 7th, 2025, DashPad is in active, pre-release development. Since the project is created and managed by a solo developer, the primary goal is to establish a stable and coherent codebase that aligns with long-term architectural goals.</p> <p>Consequently, pull requests will not be reviewed or accepted at this time. The codebase is likely to undergo significant changes, and this documentation should also be considered a living document. Your interest and patience as the project matures is appreciated!</p>"},{"location":"#what-is-dashpad","title":"What is DashPad?","text":"<p>DashPad transforms old, unused tablets (namely iPads) into real-time system monitoring displays for your servers. Built with a microservices architecture, it provides comprehensive infrastructure monitoring with minimal resource usage.</p> <p>DashPad traces its origins to 2024 as a basic, single-container solution to monitor unRAID server metrics in near-real-time. The project saw major development in mid-2025 where it was used as part of an educational project. </p> <p>For the curious, you can read the final report here: DashPad Final Report</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Real-time Monitoring: Updates every 2-60 seconds (configurable)</li> <li>Tablet Optimized: Responsive interface designed for iPad and other tablets</li> <li>Multi-Server Support: Monitor multiple systems from one dashboard</li> <li>Modular Design: Enable only the metrics you need</li> <li>Lightweight: Minimal resource usage on both server and tablet</li> </ul> <p>DashPad-API and DashPad-Web can be used 100% locally without a connection to the Internet.</p>"},{"location":"#dashpad-is-for-you-if","title":"DashPad is for you if...","text":"<p>\u2705 You have old tablets gathering dust</p> <p>\u2705 You want lightweight system monitoring without a database</p> <p>\u2705 You prefer simple, visual monitoring displays</p> <p>\u2705 You run home servers or small infrastructure </p> <p>\u2705 You value resource efficiency</p> <p>\u2705 You want at-a-glance system health visibility</p>"},{"location":"#dashpad-is-not-for-you-if","title":"DashPad is NOT for you if...","text":"<p>\u274c You need historical data storage (at least, for more than one hour)</p> <p>\u274c You require complex alerting rules</p> <p>\u274c You want a full monitoring stack</p> <p>\u274c You need Windows support</p> <p>\u274c You require user management or multi-tenancy</p> <p>\u274c You need to monitor multiple dozens of servers</p> <p>\u274c You're uncomfortable leaving electronics on and plugged in constantly</p>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<p>DashPad consists of two primary microservices:</p> Component Description Deployment DashPad-API Backend data collection service Local server only DashPad-Web Frontend monitoring interface Local or cloud <p>IMPORTANT</p> <p>The API container (DashPad-API) must run directly on the server being monitored, as it requires access to system directories like <code>/proc</code>. Only the Web container can be deployed to the cloud.</p>"},{"location":"#available-metrics","title":"Available Metrics","text":"<ul> <li>System Metrics: CPU usage, RAM usage, system uptime</li> <li>Log Monitoring: Real-time system log viewing</li> <li>Scheduled Tasks: Cron job monitoring</li> <li>Alerts: Netdata integration for system alerts</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Architecture - Technical design overview</li> <li>API Configuration - Backend setup</li> <li>Web Configuration - Frontend setup</li> <li>API Reference - Endpoint documentation</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>Documentation: You're here! \ud83d\udc4b</li> <li>Source Code: GitHub Repository</li> </ul>"},{"location":"architecture/","title":"Architecture Overview","text":"2025-06-192025-07-13 <p>DashPad implements a clean microservices architecture with two distinct components designed for different deployment scenarios.</p> <p></p>"},{"location":"architecture/#system-design","title":"System Design","text":"<p>DashPad uses a two-container architecture:</p> <ul> <li>DashPad-API: Runs on the (Linux-based) server being monitored, collects system metrics</li> <li>DashPad-Web: Can run anywhere, displays the collected metrics</li> </ul> <p>The API container MUST run directly on the Linux server because it needs direct access to system files like <code>/proc</code>, <code>/sys</code>, and log files. The Web container connects to one or more API containers to display data.</p>"},{"location":"architecture/#dashpad-api-architecture","title":"DashPad-API Architecture","text":"<p>Technology Stack: FastAPI, Python 3.9+</p> <p>Key Responsibilities:</p> <ul> <li>System metrics collection from multiple sources</li> <li>Data caching for efficiency</li> <li>RESTful API endpoints</li> <li>Modular metric collection system</li> </ul> <p>Resource Usage: ~50MB RAM</p> <p>The API uses a modular architecture where each metric type (CPU, RAM, etc.) is a separate module with its own collection logic.</p>"},{"location":"architecture/#dashpad-web-architecture","title":"DashPad-Web Architecture","text":"<p>Technology Stack: Svelte 5, NGINX</p> <p>Key Responsibilities:</p> <ul> <li>Responsive tablet-optimized interface</li> <li>Real-time data visualization</li> <li>Local settings management via localStorage</li> <li>Multi-server dashboard coordination</li> </ul> <p>Resource Usage: ~20MB RAM</p> <p>The Web interface polls the API at regular intervals and displays the data using a unified module system.</p>"},{"location":"architecture/#data-flow","title":"Data Flow","text":"<ol> <li>Metric Collection: API reads system data from sources (direct file reading or Netdata API)</li> <li>Data Processing: Raw data is processed and status is evaluated against thresholds</li> <li>Caching: Processed data is cached to reduce system load</li> <li>API Response: Data is formatted and returned via RESTful endpoints</li> <li>Frontend Polling: Web interface requests data at configured intervals</li> <li>Display Update: UI updates with new data and visual status indicators</li> </ol>"},{"location":"architecture/#data-sources","title":"Data Sources","text":"<p>The API supports multiple data sources with automatic fallback:</p> <ul> <li>Direct: Reads directly from <code>/proc</code>, <code>/sys</code>, and log files</li> <li>Netdata: Queries the Netdata API if available</li> </ul>"},{"location":"architecture/#multi-server-architecture","title":"Multi-Server Architecture","text":"<p>DashPad supports monitoring multiple servers from a single Web interface.</p> <p>Each server runs its own API container, and one central Web container connects to all of them.</p>"},{"location":"architecture/#design-principles","title":"Design Principles","text":""},{"location":"architecture/#separation-of-concerns","title":"Separation of Concerns","text":"<p>Backend Controls:</p> <ul> <li>WHAT data is collected</li> <li>Collection intervals and sources</li> <li>Alert thresholds and business logic</li> <li>System configuration and access</li> </ul> <p>Frontend Controls:</p> <ul> <li>HOW data is displayed</li> <li>Dashboard layout and positioning</li> <li>UI preferences and behavior</li> <li>Which servers to monitor</li> </ul> <p>This separation ensures the API remains authoritative for data while the frontend handles presentation, making the system flexible and maintainable.</p>"},{"location":"docker/","title":"Docker Deployment","text":"2025-06-262025-07-13 <p>This guide covers deploying DashPad using Docker on your Linux server.</p>"},{"location":"docker/#important-notes","title":"Important Notes","text":"<p>\u26a0\ufe0f The API container MUST run on the server you want to monitor. It requires direct access to: - <code>/proc</code> filesystem - <code>/sys</code> filesystem - System log files - Host networking</p> <p>The Web container can run anywhere (local or cloud).</p>"},{"location":"docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker 20.10+</li> <li>Docker Compose 1.29+</li> <li>Linux server to monitor</li> <li>500MB free disk space</li> </ul>"},{"location":"docker/#quick-deployment","title":"Quick Deployment","text":""},{"location":"docker/#1-create-project-directory","title":"1. Create Project Directory","text":"<pre><code>mkdir -p /opt/dashpad &amp;&amp; cd /opt/dashpad\n</code></pre>"},{"location":"docker/#2-create-docker-composeyml","title":"2. Create docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  dashpad-api:\n    image: ghcr.io/mrchrisneal/dashpad-api:latest\n    container_name: dashpad-api\n    restart: unless-stopped\n    ports:\n      - \"5241:5241\"\n    volumes:\n      - ./settings.json:/app/settings.json:ro\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /var/log:/host/var/log:ro\n    environment:\n      - TZ=America/New_York\n\n  dashpad-web:\n    image: ghcr.io/mrchrisneal/dashpad-web:latest\n    container_name: dashpad-web\n    restart: unless-stopped\n    ports:\n      - \"5240:5240\"\n    environment:\n      - LISTEN_PORT=5240\n      - USE_HTTPS=true\n      - AUTH_USERNAME=admin\n      - AUTH_PASSWORD=password\n      - SERVER1_NAME=Local Server\n      - SERVER1_URL=https://dashpad-api:5241\n      - SERVER1_KEY=your-64-character-api-key-from-api-logs\n      - SERVER1_SSLFINGERPRINT=your-ssl-fingerprint-from-api-logs\n    depends_on:\n      - dashpad-api\n</code></pre>"},{"location":"docker/#3-create-settingsjson","title":"3. Create settings.json","text":"<pre><code>{\n  \"api\": {\n    \"host\": \"0.0.0.0\",\n    \"port\": 5241\n  },\n  \"metrics\": {\n    \"update_interval_seconds\": 4,\n    \"enabled_metrics\": [\n      \"cpu_usage\",\n      \"ram_usage\",\n      \"system_uptime\"\n    ]\n  }\n}\n</code></pre>"},{"location":"docker/#4-start-services","title":"4. Start Services","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"docker/#volume-mounts","title":"Volume Mounts","text":"<p>The API container needs read-only access to system directories:</p> <pre><code>volumes:\n  # Configuration\n  - ./settings.json:/app/settings.json:ro\n\n  # System metrics (required)\n  - /proc:/host/proc:ro\n  - /sys:/host/sys:ro\n\n  # Logs (optional)\n  - /var/log:/host/var/log:ro\n\n  # unRAID specific (optional)\n  - /var/local/emhttp:/host/var/local/emhttp:ro\n  - /etc/cron.d:/host/etc/cron.d:ro\n</code></pre>"},{"location":"docker/#multi-server-monitoring","title":"Multi-Server Monitoring","text":"<p>To monitor multiple servers, run an API container on each server:</p> <p>Server 1: <pre><code>docker run -d \\\n  --name dashpad-api-server1 \\\n  -p 5241:5241 \\\n  -v ./settings.json:/app/settings.json:ro \\\n  -v /proc:/host/proc:ro \\\n  -v /sys:/host/sys:ro \\\n  dashpad-api\n</code></pre></p> <p>Server 2: <pre><code>docker run -d \\\n  --name dashpad-api-server2 \\\n  -p 5556:5241 \\\n  -v ./settings.json:/app/settings.json:ro \\\n  -v /proc:/host/proc:ro \\\n  -v /sys:/host/sys:ro \\\n  dashpad-api\n</code></pre></p> <p>Central Web Container: <pre><code>docker run -d \\\n  --name dashpad-web \\\n  -p 5240:5240 \\\n  -e LISTEN_PORT=5240 \\\n  -e USE_HTTPS=true \\\n  -e AUTH_USERNAME=admin \\\n  -e AUTH_PASSWORD=password \\\n  -e SERVER1_NAME=\"Server 1\" \\\n  -e SERVER1_URL=\"https://server1:5241\" \\\n  -e SERVER1_KEY=\"api-key-from-server1-logs\" \\\n  -e SERVER1_SSLFINGERPRINT=\"ssl-fingerprint-from-server1-logs\" \\\n  -e SERVER2_NAME=\"Server 2\" \\\n  -e SERVER2_URL=\"https://server2:5241\" \\\n  -e SERVER2_KEY=\"api-key-from-server2-logs\" \\\n  -e SERVER2_SSLFINGERPRINT=\"ssl-fingerprint-from-server2-logs\" \\\n  dashpad-web\n</code></pre></p>"},{"location":"docker/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"docker/#unraid","title":"unRAID","text":"<p>Add via Docker template or use command line with appropriate paths.</p>"},{"location":"docker/#synology-nas","title":"Synology NAS","text":"<ol> <li>Install Docker from Package Center</li> <li>Create shared folder <code>/docker/dashpad</code></li> <li>Use Container Manager to deploy</li> </ol>"},{"location":"docker/#standard-linux","title":"Standard Linux","text":"<p>Works on any Linux distribution with Docker installed.</p>"},{"location":"docker/#security","title":"Security","text":""},{"location":"docker/#enable-api-authentication","title":"Enable API Authentication","text":"<p>API authentication is enabled by default. To get your API key and SSL fingerprint:</p> <ol> <li> <p>Check API container logs:    <pre><code>docker logs dashpad-api | grep -E \"API Key:|SSL Fingerprint:\"\n</code></pre></p> </li> <li> <p>Use these values in your Web container configuration:    <pre><code>environment:\n  - SERVER1_KEY=your-64-character-key-from-logs\n  - SERVER1_SSLFINGERPRINT=your-ssl-fingerprint-from-logs\n</code></pre></p> </li> </ol>"},{"location":"docker/#maintenance","title":"Maintenance","text":""},{"location":"docker/#view-logs","title":"View Logs","text":"<pre><code>docker-compose logs -f dashpad-api\ndocker-compose logs -f dashpad-web\n</code></pre>"},{"location":"docker/#update-containers","title":"Update Containers","text":"<pre><code>docker-compose pull\ndocker-compose up -d\n</code></pre>"},{"location":"docker/#check-status","title":"Check Status","text":"<pre><code>docker-compose ps\n</code></pre>"},{"location":"docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"docker/#container-wont-start","title":"Container Won't Start","text":"<p>Check logs: <pre><code>docker logs dashpad-api\n</code></pre></p> <p>Common issues: - Port already in use - Permission denied on volume mounts - Invalid settings.json</p>"},{"location":"docker/#no-data-showing","title":"No Data Showing","text":"<p>Verify: - API is accessible: <code>curl -k https://localhost:5241/health</code> - Correct volume mounts - Settings.json is valid JSON - API key and SSL fingerprint are correct in Web container</p>"},{"location":"docker/#next-steps","title":"Next Steps","text":"<ul> <li>API Configuration - Configure metrics</li> <li>Web Configuration - Configure interface</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":"2025-07-072025-07-13 <p>This page answers commonly asked questions about the DashPad project, including questions pertaining to both the <code>DashPad-Web</code> and <code>DashPad-API</code> components.</p>"},{"location":"faq/#licensing-cost","title":"Licensing &amp; Cost","text":""},{"location":"faq/#is-dashpad-free","title":"Is DashPad free?","text":"<ul> <li> <p>Yes, DashPad is free for personal, non-commercial, and educational use under the GPL v3 license.</p> </li> <li> <p>If you intend to use DashPad in a commercial product, a proprietary application, or for any revenue-generating activities, you must purchase a commercial license. Please contact mrchrisneal@gmail.com for commercial licensing inquiries.</p> </li> <li> <p>When in doubt, refer to the <code>LICENSE.md</code> file located within all DashPad project repositories.</p> </li> </ul> <p>Cloud Deployment Costs</p> <p>If you're planning to host the DashPad-Web container on a platform like Google Cloud, please refer to the Google Cloud Run Deployment Guide, or see page 10 in the DashPad Report document for projected and measured costs. </p> <p>Basically, you decide how much DashPad-Web will cost to run on cloud platforms!</p>"},{"location":"faq/#what-is-the-difference-between-personal-and-commercial-use","title":"What is the difference between personal and commercial use?","text":"<ul> <li> <p>Personal Use (Free): This includes running DashPad on your home servers, for personal projects, or for educational purposes. You are free to use, modify, and share the software under the terms of the GPL v3 license.</p> </li> <li> <p>Commercial Use (Paid): This includes using DashPad in a business environment, integrating it into proprietary software that you sell, or any other context where DashPad is part of a revenue-generating activity.</p> </li> </ul>"},{"location":"faq/#system-requirements","title":"System Requirements","text":""},{"location":"faq/#what-are-the-system-requirements-for-running-dashpad","title":"What are the system requirements for running DashPad?","text":""},{"location":"faq/#server-container-requirements","title":"Server (Container) Requirements","text":"<ul> <li> <p>A Linux-based server capable of running Docker containers. If you can execute <code>docker run hello-world</code> in a terminal without issues, you're probably good to go! </p> <ul> <li>If you have a Linux-based server but don't have Docker installed, you may want to refer to Docker's official Install page for more information.</li> </ul> </li> <li> <p>Since DashPad was designed to be extremely lightweight, minimal resource allocation is needed. Testing shows usage of less than 50MB of RAM and &lt;1% utilization of one CPU core (after startup) for both the API and Web containers. </p> </li> <li> <p>Network connectivity between the <code>DashPad-Web</code> and <code>DashPad-API</code> containers.</p> </li> </ul>"},{"location":"faq/#browser-requirements","title":"Browser Requirements","text":"<ul> <li>While very few devices have been tested, the oldest one so far is an iPad Air 2 from 2014 running iOS 15.8.4; it appears to be fairly responsive and displays the web dashboard without issue (at default update intervals). </li> </ul> <p>Your performance may vary; try increasing the duration of your update intervals (ex. increase from four to eight or more seconds) if your tablet appears to fall behind or becomes unresponsive.</p>"},{"location":"faq/#how-many-servers-can-i-monitor-with-one-dashpad-web-instance","title":"How many servers can I monitor with one DashPad-Web instance?","text":"<ul> <li> <p>Tested Configuration: The system has been reliably tested with 2+ unRAID servers running concurrently.</p> </li> <li> <p>Theoretical Limit: The startup script is built to support up to 50 servers.</p> </li> <li> <p>Recommended Limit: For optimal performance, monitoring between 10-20 servers should be a comfortable upper limit. Performance depends on factors like polling frequency, the number of modules displayed per server, and network latency.</p> </li> </ul>"},{"location":"faq/#privacy-security","title":"Privacy &amp; Security","text":""},{"location":"faq/#does-dashpad-phone-home-or-have-any-telemetry","title":"Does DashPad \"phone home\" or have any telemetry?","text":"<ul> <li> <p>No. DashPad is designed with privacy as a core principle and operates completely on your own infrastructure.</p> </li> <li> <p>There is no external communication or telemetry of any kind. It can operate entirely on an offline, local network. No data is ever collected or transmitted to external services. All monitoring data stays on your servers.</p> </li> </ul>"},{"location":"faq/#how-is-my-data-secured","title":"How is my data secured?","text":"<p>Since DashPad is a self-hosted solution, you are in complete control of your data and its security. The application provides several security features:</p> <ul> <li> <p>HTTPS Support: Communication is encrypted with HTTPS, supporting both self-signed and CA-issued certificates.</p> </li> <li> <p>API Key Authentication: Every request to a <code>DashPad-API</code> instance is authenticated with a secure, 64-character API key.</p> </li> <li> <p>No Cloud Dependencies: The core functionality has no reliance on external cloud services.</p> </li> </ul>"},{"location":"faq/#open-source-development","title":"Open Source &amp; Development","text":""},{"location":"faq/#is-dashpad-open-source","title":"Is DashPad open source?","text":"<p>Kind of. DashPad is more aptly described as \"source-available\" under a dual-license model:</p> <ul> <li> <p>The GPL v3 license applies to all personal and non-commercial use.</p> </li> <li> <p>A Commercial License is required for all other use cases.</p> </li> </ul> <p>The source code is publicly available on GitHub for review, auditing, and personal modification. The project may evolve to a more traditional open-source model as it matures.</p>"},{"location":"faq/#whats-the-overall-status-of-the-project","title":"What's the overall status of the project?","text":"<p>As of July 7th, 2025, DashPad is in active, pre-release development. Since the project is created and managed by a solo developer, the primary goal is to establish a stable and coherent codebase that aligns with long-term architectural goals. </p> <p>Consequently, pull requests will not be reviewed or accepted at this time. The codebase is likely to undergo significant changes, and this documentation should also be considered a living document. </p> <p>Your interest and patience as the project matures is appreciated!</p>"},{"location":"faq/#can-i-contribute-to-the-project","title":"Can I contribute to the project?","text":"<p>Community involvement is highly encouraged!</p> <ul> <li> <p>Bug Reports &amp; Feature Suggestions: Please submit these via the GitHub Issues page for the respective repository (<code>DashPad-Web</code> or <code>DashPad-API</code>).</p> </li> <li> <p>Pull Requests: Direct pull requests are not being accepted at this time.</p> </li> <li> <p>Community feedback is essential and directly influences development priorities. Please see the <code>CONTRIBUTING.md</code> file in the repositories for the most current guidelines.</p> </li> </ul>"},{"location":"faq/#usage-positioning","title":"Usage &amp; Positioning","text":""},{"location":"faq/#is-dashpad-a-replacement-for-grafana-prometheus-or-zabbix","title":"Is DashPad a replacement for Grafana, Prometheus, or Zabbix?","text":"<p>No. Please do not do this! \u2764\ufe0f</p> <p>DashPad is designed to be a supplementary monitoring tool, not a replacement for a comprehensive monitoring stack.</p> <p>Use DashPad if you want... </p> <p>\u2705 Lightweight, customizable, (near) real-time visualizations</p> <p>\u2705 System info neatly displayed on smaller displays</p> <p>\u2705 A quick, at-a-glance status check of your systems</p> <p>Do NOT use DashPad if you need... </p> <p>\u274c Long-term data storage</p> <p>\u274c Detailed analytics</p> <p>\u274c Complex querying</p> <p>\u274c Incident management or alerting</p> <p>For robust, in-depth monitoring, you should use DashPad alongside dedicated solutions like Prometheus, Grafana, or Netdata.</p>"},{"location":"faq/#what-are-the-typical-use-cases-for-dashpad","title":"What are the typical use cases for DashPad?","text":"<ul> <li> <p>Home Lab Monitoring: The perfect tool for keeping an eye on your personal servers, NAS, and other home lab equipment.</p> </li> <li> <p>Kiosk Displays: Its primary purpose is to repurpose old tablets or small screens into dedicated, always-on monitoring dashboards.</p> </li> <li> <p>Supplementary Dashboards: Use it to create a simple, clean \"main overview\" dashboard that complements your more detailed Grafana (or similar) dashboards.</p> </li> </ul>"},{"location":"faq/#technical-support","title":"Technical Support","text":""},{"location":"faq/#where-can-i-get-help-or-report-a-bug","title":"Where can I get help or report a bug?","text":"<ul> <li> <p>Documentation: Your first stop should always be the official documentation. The good news is, you're already here! \ud83d\udc4b</p> </li> <li> <p>GitHub Issues: This is the best place to report bugs or request new features. Please be as detailed as possible in your report, and include container or browser console logs.</p> </li> <li> <p>Email: For commercial licensing and business inquiries, please contact mrchrisneal@gmail.com.</p> </li> </ul>"},{"location":"api/","title":"DashPad-API Overview","text":"2025-06-192025-07-13 <p>The DashPad-API is a lightweight, secure, and efficient backend service built with Python and FastAPI. It serves as the data collection engine for the DashPad ecosystem, running directly on your Linux servers to gather system metrics, logs, and other vital information. It then exposes this data through a clean, RESTful API, ready to be consumed by the DashPad-Web interface.</p> <p>Important Concepts</p> <ul> <li>Purpose: DashPad-API is the backend data collector. It runs on a server, gathers metrics, and provides them to the web interface. </li> <li>Deployment: The API container must run directly on the Linux-based server you want to monitor. It should never be deployed to a cloud service. </li> <li>Configuration: All configuration is managed through a single <code>settings.json</code> file, giving you granular control over every aspect of data collection. </li> <li>Data Sources: It intelligently pulls data from multiple sources, including direct system files (<code>/proc</code>, <code>/sys</code>) and the Netdata API, with automatic fallback (assuming a valid Netdata instance is installed/running).</li> <li>Security: Communication is secured with HTTPS and a mandatory 64-character API key, both of which are automatically generated on first run.</li> </ul> <p>In a Hurry? Check out the Quick Start Guide for the fastest way to get up and running.</p> <p>Deployment Requirement</p> <p>The DashPad-API container must run directly on the server being monitored. This is not optional. It is designed to have low-level access to the system's filesystems to collect accurate data:</p> <ul> <li>Direct Filesystem Access: It reads directly from <code>/proc</code> and <code>/sys</code> for core metrics like CPU, RAM, and system uptime.</li> <li>Log File Access: It requires access to system log files located in directories like <code>/var/log</code>.</li> <li>Future-Proofing: This design allows for future modules that may require deeper system integration.</li> </ul>"},{"location":"api/#key-features","title":"Key Features","text":"<ul> <li> <p>Multi-Source Data Collection: Automatically selects a data source in a customizable order (<code>direct</code> file access or <code>Netdata</code> API) for each metric, ensuring reliability and flexibility.</p> </li> <li> <p>Efficient Caching: In-memory caching minimizes system load by reducing redundant data collection for frequent requests.</p> </li> <li> <p>Modular Architecture: Each metric, log, or data type is a self-contained module, making the system easy to maintain and extend.</p> </li> <li> <p>Secure by Default: Enforces HTTPS and requires API key authentication for all endpoints. SSL certificates and a strong API key are generated automatically on first launch.</p> </li> <li> <p>Interactive API Docs: Leverages FastAPI to provide auto-generated, interactive API documentation, making it easy to explore and test endpoints directly from your browser.</p> </li> <li> <p>Dynamic Configuration: All behavior is controlled via the <code>settings.json</code> file, allowing for detailed customization without rebuilding the container.</p> </li> </ul>"},{"location":"api/#architecture-summary","title":"Architecture Summary","text":"<p>The API is built around a few core components that work together to provide data efficiently and reliably.</p> <ul> <li> <p>Scheduler: A background process that periodically collects data for all enabled modules based on the intervals you define in <code>settings.json</code>. This ensures that data is always fresh without constantly polling system files.</p> </li> <li> <p>Cache: Once collected, the processed data for each module is stored in a simple in-memory cache. When the web interface requests data, it is served directly from this fast cache, preventing high system load.</p> </li> <li> <p>Module System: Each type of data (CPU, RAM, Logs, etc.) is handled by a dedicated module. Each module knows how to collect its specific data from different sources (currently either directly or from the Netdata API) and how to process it into a standard format.</p> </li> <li> <p>API Endpoints: The FastAPI application exposes the cached data through a set of RESTful endpoints. It also handles incoming requests, authentication, and response formatting.</p> </li> </ul>"},{"location":"api/#accessing-the-interactive-api-docs","title":"Accessing the Interactive API Docs","text":"<p>FastAPI automatically generates a user-friendly, interactive interface for the API. Once the container is running, you can access it in your browser to see all available endpoints, view their schemas, and test them live.</p> <p>Access the interactive documentation at:</p> <p><code>https://&lt;your_server_ip&gt;:5241/docs</code></p> <p>Authentication Notice</p> <p>At the top of the interactive docs page, you will see text stating that authentication is required. While the documentation page is public, interacting with the API (using interactive demos) requires authentication.</p> <p>While the documentation page itself is visible to anyone, you must authenticate (with your API key) to use the \"Try it out\" feature for any of the endpoints.</p> <p>Listed below are three primary methods for authenticating with the interactive documentation.</p> <p>How Do I Authenticate With Interactive Documentation?</p> Before You Proceed: Get Your API Key <p>You should have your generated DashPad-API key handy (perhaps even saved somewhere) before proceeding. This key is 64 hexacedimal characters long, and can be found in the DashPad-API container logs, printed as part of the startup process. </p> <p>Your API key should resemble the string of characters below:</p> <p><code>1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef</code></p> Method 1: Authorize ButtonMethod 2: URL ParameterMethod 3: Browser Extension <p>Use the \"Authorize\" Button (Recommended)</p> <p>This is the easiest and most convenient way to authenticate your session directly within the docs page.</p> <ol> <li>Click the Authorize button (with a lock icon) located at the top right of the page.</li> <li>An \"Available authorizations\" dialog will appear. </li> <li>In the <code>BearerAuth</code> section, paste your 64-character API key into the Value field. (You can use any of the defined schemes, though <code>BearerAuth</code> will be used as the example here.)</li> <li>Click the Authorize button in the dialog, and then Close.</li> </ol> <p>The lock icon on the Authorize button will now appear \"closed,\" indicating that you are authenticated. All \"Try it out\" requests you make from the page will now automatically include the correct <code>Authorization: Bearer &lt;your-api-key&gt;</code> header.</p> <p>Use a URL Parameter (Quick Access)</p> <p>For quick, one-off access, you can provide the API key as a URL parameter. This is useful for sharing a direct link to the docs.</p> <p>Simply append <code>?apikey=</code> followed by your key to the URL: <code>https://&lt;your_server_ip&gt;:5241/docs?apikey=&lt;YOUR_API_KEY&gt;</code></p> <p>While convenient, be mindful of who you share these URLs with (API keys are like passwords).</p> <p>Use a Browser Extension (Advanced)</p> <p>For developers who frequently interact with the API, using a browser extension to set the request header is a powerful option. This method allows you to set the API key once for the domain, and it will be automatically included in every request.</p> <ol> <li>Install a browser extension that can modify request headers (e.g., \"ModHeader\" for Chrome/Firefox).</li> <li>Configure the extension to add one of the following headers for all requests to your API's domain (<code>&lt;your_server_ip&gt;:5241</code>):<ul> <li>Header Name: <code>X-API-Key</code></li> <li>Header Value: <code>&lt;YOUR_API_KEY&gt;</code></li> </ul> </li> <li>With the extension active, the interactive docs will be automatically authenticated on every visit.</li> </ol>"},{"location":"api/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Quick Start: Get the API container up and running in minutes.</p> </li> <li> <p>Configuration: A deep dive into the <code>settings.json</code> file.</p> </li> <li> <p>API Reference: Detailed documentation for every API endpoint.</p> </li> </ul>"},{"location":"api/configuration/","title":"Configuration","text":"2025-06-192025-07-13 <p>This document covers configuring the DashPad API through the <code>settings.json</code> file.</p>"},{"location":"api/configuration/#configuration-file","title":"Configuration File","text":"<p>The <code>settings.json</code> file should be placed in the API container root: - Docker: Mount as volume at <code>/app/settings.json</code> - Local Development: Place in project root</p>"},{"location":"api/configuration/#core-configuration-sections","title":"Core Configuration Sections","text":""},{"location":"api/configuration/#api-server-settings","title":"API Server Settings","text":"<pre><code>{\n  \"api\": {\n    \"host\": \"0.0.0.0\",\n    \"port\": 5241,\n    \"allow_origins\": [\"*\"],\n    \"auth\": {\n      \"enabled\": true,\n      \"api_key\": \"your-64-character-hex-key\"\n    }\n  }\n}\n</code></pre> <p>Note: API authentication is enabled by default. The API key is auto-generated on first startup and displayed in the container logs.</p>"},{"location":"api/configuration/#metrics-configuration","title":"Metrics Configuration","text":"<p>Control which metrics are collected:</p> <pre><code>{\n  \"metrics\": {\n    \"update_interval_seconds\": 4,\n    \"enabled_metrics\": [\"cpu_usage\", \"ram_usage\", \"system_uptime\"],\n    \"sources\": {\n      \"cpu_usage\": [\"direct\", \"netdata\"],\n      \"ram_usage\": [\"direct\", \"netdata\"],\n      \"system_uptime\": [\"direct\"]\n    }\n  }\n}\n</code></pre>"},{"location":"api/configuration/#threshold-configuration","title":"Threshold Configuration","text":"<p>Define warning and critical levels:</p> <pre><code>{\n  \"metrics_thresholds\": {\n    \"cpu_usage\": {\n      \"warning\": 80,\n      \"critical\": 90,\n      \"direction\": \"above\"\n    },\n    \"ram_usage\": {\n      \"warning\": 80,\n      \"critical\": 90,\n      \"direction\": \"above\"\n    }\n  }\n}\n</code></pre> <p>Direction can be: - <code>\"above\"</code>: Alert when value exceeds threshold - <code>\"below\"</code>: Alert when value falls below threshold</p>"},{"location":"api/configuration/#log-configuration","title":"Log Configuration","text":"<p>Configure log file monitoring:</p> <pre><code>{\n  \"logs\": {\n    \"syslog\": {\n      \"path\": \"/var/log/syslog\",\n      \"lines\": 100,\n      \"redact_datatype\": [\"ip\", \"email\"]\n    }\n  }\n}\n</code></pre>"},{"location":"api/configuration/#cron-configuration","title":"Cron Configuration","text":"<p>Monitor scheduled tasks:</p> <pre><code>{\n  \"cron\": {\n    \"locations_types_map\": {\n      \"/etc/cron.d/\": \"auto\"\n    },\n    \"rename_map\": {\n      \"backup\": \"Daily Backup Task\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/configuration/#netdata-integration","title":"Netdata Integration","text":"<p>If using Netdata as a data source:</p> <pre><code>{\n  \"netdata\": {\n    \"url\": \"http://localhost:19999\"\n  }\n}\n</code></pre>"},{"location":"api/configuration/#complete-example","title":"Complete Example","text":"<p>Here's a minimal working configuration:</p> <pre><code>{\n  \"api\": {\n    \"host\": \"0.0.0.0\",\n    \"port\": 5241\n  },\n  \"metrics\": {\n    \"update_interval_seconds\": 4,\n    \"enabled_metrics\": [\n      \"cpu_usage\",\n      \"ram_usage\",\n      \"system_uptime\"\n    ]\n  },\n  \"metrics_thresholds\": {\n    \"cpu_usage\": {\n      \"warning\": 80,\n      \"critical\": 90,\n      \"direction\": \"above\"\n    },\n    \"ram_usage\": {\n      \"warning\": 80,\n      \"critical\": 90,\n      \"direction\": \"above\"\n    }\n  },\n  \"logs\": {\n    \"syslog\": {\n      \"path\": \"/var/log/syslog\",\n      \"lines\": 100\n    }\n  }\n}\n</code></pre>"},{"location":"api/configuration/#environment-variables","title":"Environment Variables","text":"<p>Some settings can be overridden:</p> Variable Overrides Example <code>API_HOST</code> <code>api.host</code> <code>0.0.0.0</code> <code>API_PORT</code> <code>api.port</code> <code>5241</code> <code>TZ</code> System timezone <code>America/New_York</code>"},{"location":"api/configuration/#path-types","title":"Path Types","text":"<p>When configuring file paths, use the appropriate type:</p> <ul> <li><code>\"direct\"</code>: Use path exactly as specified</li> <li><code>\"bindmount\"</code>: Prepend <code>/host/</code> to the path</li> <li><code>\"auto\"</code>: Automatically detect container environment</li> </ul>"},{"location":"api/configuration/#data-redaction","title":"Data Redaction","text":"<p>Available redaction types for logs: - <code>ip</code>: Redact IP addresses - <code>mac</code>: Redact MAC addresses - <code>email</code>: Redact email addresses - <code>url</code>: Redact URLs</p>"},{"location":"api/configuration/#validation","title":"Validation","text":"<p>The API validates configuration on startup. Common errors: - Invalid JSON syntax - Unknown configuration keys - Invalid threshold values</p> <p>Check logs if the API fails to start: <pre><code>docker logs dashpad-api\n</code></pre></p>"},{"location":"api/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>API Endpoints - Endpoint reference</li> <li>Available Modules - Module configurations</li> </ul>"},{"location":"api/endpoints/","title":"API Endpoints","text":"2025-06-192025-07-13 <p>Complete reference for all DashPad API endpoints.</p>"},{"location":"api/endpoints/#interactive-documentation","title":"Interactive Documentation","text":"<p>FastAPI provides auto-generated interactive API documentation at:</p> <pre><code>https://your-server:5241/docs\n</code></pre> <p>This allows you to explore and test all endpoints directly in your browser.</p>"},{"location":"api/endpoints/#authentication","title":"Authentication","text":"<p>If authentication is enabled, include the API key in the request header:</p> <pre><code>X-API-Key: your-64-character-hex-key\n</code></pre>"},{"location":"api/endpoints/#base-url","title":"Base URL","text":"<pre><code>https://your-server:5241\n</code></pre>"},{"location":"api/endpoints/#health-status-endpoints","title":"Health &amp; Status Endpoints","text":""},{"location":"api/endpoints/#get-health","title":"GET /health","text":"<p>Basic health check endpoint.</p> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"server_identity\": \"your-server\",\n  \"timezone\": \"America/New_York\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#get-status","title":"GET /status","text":"<p>Detailed server status information.</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"timezone\": \"America/New_York\",\n  \"server_info\": {\n    \"hostname\": \"your-server\",\n    \"platform\": \"linux\",\n    \"python_version\": \"3.9.16\"\n  },\n  \"api_config\": {\n    \"authentication_enabled\": false,\n    \"cors_origins\": [\"*\"]\n  },\n  \"scheduler_config\": {\n    \"metrics_interval\": 4,\n    \"logs_interval\": 30\n  },\n  \"integrations\": {\n    \"netdata\": {\n      \"enabled\": true,\n      \"url\": \"http://localhost:19999\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/endpoints/#metrics-endpoints","title":"Metrics Endpoints","text":""},{"location":"api/endpoints/#get-metrics","title":"GET /metrics","text":"<p>Returns all enabled metrics in a single response.</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"metrics\": {\n    \"cpu\": {\n      \"source\": \"direct\",\n      \"status\": \"good\",\n      \"data\": {\n        \"usage_percent\": 45.2\n      }\n    },\n    \"ram\": {\n      \"source\": \"direct\",\n      \"status\": \"warning\",\n      \"data\": {\n        \"usage_percent\": 82.5,\n        \"used_mb\": 13200,\n        \"total_mb\": 16000\n      }\n    },\n    \"uptime\": {\n      \"source\": \"direct\",\n      \"status\": \"good\",\n      \"data\": {\n        \"uptime_seconds\": 86400,\n        \"human_readable\": \"1 day, 0 hrs, 0 mins, 0 secs\"\n      }\n    }\n  },\n  \"logs\": {\n    \"syslog\": {\n      \"content\": {...},\n      \"total_lines\": 5000,\n      \"returned_lines\": 100\n    }\n  },\n  \"cron\": {\n    \"cron_tasks\": [...],\n    \"status\": \"normal\"\n  },\n  \"alerts\": {\n    \"alerts\": [...],\n    \"status\": \"normal\"\n  },\n  \"next_update_sec\": 4\n}\n</code></pre></p>"},{"location":"api/endpoints/#get-metricsmetric_name","title":"GET /metrics/{metric_name}","text":"<p>Get a specific metric by name.</p> <p>Parameters: - <code>metric_name</code> - Name of the metric (e.g., cpu_usage, ram_usage, system_uptime)</p> <p>Response: <pre><code>{\n  \"metric\": \"cpu_usage\",\n  \"timestamp\": \"2025-06-18T19:17:00.000-07:00\",\n  \"data\": {\n    \"usage_percent\": 45.2\n  },\n  \"source\": \"direct\",\n  \"status\": \"good\",\n  \"update_interval_sec\": 4\n}\n</code></pre></p>"},{"location":"api/endpoints/#get-querysourcemetric","title":"GET /query/{source}/{metric}","text":"<p>Query a specific metric from a specific source (for testing).</p> <p>Parameters: - <code>source</code> - Data source: <code>direct</code> or <code>netdata</code> - <code>metric</code> - Metric name</p> <p>Response: <pre><code>{\n  \"metric\": \"cpu_usage\",\n  \"timestamp\": \"2025-06-18T19:17:00.000-07:00\",\n  \"data\": {\n    \"usage_percent\": 45.2\n  },\n  \"source\": \"direct\",\n  \"server_identity\": \"your-server\",\n  \"status\": \"good\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#log-endpoints","title":"Log Endpoints","text":""},{"location":"api/endpoints/#get-logs","title":"GET /logs","text":"<p>Returns all configured logs with their contents.</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"logs\": {\n    \"syslog\": {\n      \"content\": {\n        \"1\": \"Jun 18 19:15:00 server systemd[1]: Started Daily apt download.\",\n        \"2\": \"Jun 18 19:16:00 server kernel: [12345.678] CPU0: Temperature above threshold\"\n      },\n      \"total_lines\": 5000,\n      \"returned_lines\": 100,\n      \"supports_incremental\": true\n    }\n  },\n  \"next_update_sec\": 30\n}\n</code></pre></p>"},{"location":"api/endpoints/#get-logslog_name","title":"GET /logs/{log_name}","text":"<p>Get a specific log by name.</p> <p>Parameters: - <code>log_name</code> - Name of the log as configured in settings.json - <code>since_line</code> (optional) - Line number to start from (for incremental updates)</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"content\": {\n    \"1001\": \"Jun 18 19:17:00 server systemd[1]: Log entry...\",\n    \"1002\": \"Jun 18 19:17:01 server kernel: Another entry...\"\n  },\n  \"total_lines\": 5000,\n  \"returned_lines\": 2,\n  \"supports_incremental\": true,\n  \"next_update_sec\": 30\n}\n</code></pre></p>"},{"location":"api/endpoints/#cron-endpoints","title":"Cron Endpoints","text":""},{"location":"api/endpoints/#get-cron_tasks","title":"GET /cron_tasks","text":"<p>Get upcoming scheduled cron tasks.</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"cron_tasks\": [\n    {\n      \"name\": \"Run file mover\",\n      \"schedule\": \"0 3 * * *\",\n      \"next_run\": \"2025-06-19T03:00:00\",\n      \"relative_time\": \"7 hours 43 minutes\",\n      \"relative_time_short\": \"7h43m\"\n    }\n  ],\n  \"cron_stats\": {\n    \"total_tasks\": 5,\n    \"next_task_minutes\": 463\n  },\n  \"source\": \"direct\",\n  \"status\": \"normal\",\n  \"next_update_sec\": 60\n}\n</code></pre></p>"},{"location":"api/endpoints/#alert-endpoints","title":"Alert Endpoints","text":""},{"location":"api/endpoints/#get-alertsnetdata","title":"GET /alerts/netdata","text":"<p>Get active alerts from Netdata.</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"alerts\": [\n    {\n      \"id\": \"disk_space_warning\",\n      \"name\": \"Disk Space Warning\",\n      \"status\": \"WARNING\",\n      \"value\": 85.2,\n      \"units\": \"%\",\n      \"info\": \"Disk usage above 80%\",\n      \"last_status_change\": 1718764620\n    }\n  ],\n  \"alerts_stats\": {\n    \"total\": 2,\n    \"by_status\": {\n      \"WARNING\": 1,\n      \"CRITICAL\": 1\n    }\n  },\n  \"source\": \"netdata\",\n  \"status\": \"warning\",\n  \"hostname\": \"your-server\",\n  \"next_update_sec\": 30\n}\n</code></pre></p>"},{"location":"api/endpoints/#scheduler-endpoints","title":"Scheduler Endpoints","text":""},{"location":"api/endpoints/#get-schedulerstatus","title":"GET /scheduler/status","text":"<p>Get scheduler status and update intervals.</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"running\": true,\n  \"update_intervals\": {\n    \"metrics\": 4,\n    \"logs\": 30,\n    \"cron\": 60,\n    \"alerts\": 30\n  },\n  \"next_updates\": {\n    \"metrics\": 2.5,\n    \"logs\": 15.3,\n    \"cron\": 45.1,\n    \"alerts\": 12.7\n  },\n  \"next_update_sec\": 2.5\n}\n</code></pre></p>"},{"location":"api/endpoints/#post-schedulercontrol","title":"POST /scheduler/control","text":"<p>Control the scheduler (start, stop, restart).</p> <p>Parameters: - <code>action</code> - One of: <code>start</code>, <code>stop</code>, <code>restart</code></p> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"message\": \"Scheduler restarted\",\n  \"running\": true,\n  \"server_identity\": \"your-server\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#configuration-endpoints","title":"Configuration Endpoints","text":""},{"location":"api/endpoints/#get-settingsmodules","title":"GET /settings/modules","text":"<p>Get available modules and their configurations.</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"modules\": {\n    \"metrics\": {\n      \"cpu_usage\": {\n        \"enabled\": true,\n        \"display_name\": \"CPU Usage\",\n        \"description\": \"Central Processing Unit utilization\",\n        \"sources\": [\"direct\", \"netdata\"],\n        \"thresholds\": {\n          \"warning\": 80,\n          \"critical\": 90\n        }\n      }\n    },\n    \"logs\": {\n      \"syslog\": {\n        \"enabled\": true,\n        \"display_name\": \"System Log\",\n        \"line_limit\": 100,\n        \"supports_redaction\": true\n      }\n    },\n    \"cron\": {\n      \"enabled\": true,\n      \"display_name\": \"Scheduled Tasks\"\n    },\n    \"alerts\": {\n      \"enabled\": true,\n      \"display_name\": \"Active Alerts\",\n      \"sources\": [\"netdata\"]\n    }\n  },\n  \"next_update_sec\": null\n}\n</code></pre></p>"},{"location":"api/endpoints/#error-responses","title":"Error Responses","text":""},{"location":"api/endpoints/#400-bad-request","title":"400 Bad Request","text":"<p>Invalid parameters or request format.</p> <pre><code>{\n  \"detail\": \"Invalid action: invalid_action. Must be one of: start, stop, restart\"\n}\n</code></pre>"},{"location":"api/endpoints/#401-unauthorized","title":"401 Unauthorized","text":"<p>Missing or invalid API key (when authentication is enabled).</p> <pre><code>{\n  \"detail\": \"Invalid or missing API key\"\n}\n</code></pre>"},{"location":"api/endpoints/#404-not-found","title":"404 Not Found","text":"<p>Resource not found.</p> <pre><code>{\n  \"detail\": \"Metric 'non_existent_metric' not found\"\n}\n</code></pre>"},{"location":"api/endpoints/#500-internal-server-error","title":"500 Internal Server Error","text":"<p>Server error during processing.</p> <pre><code>{\n  \"detail\": \"Internal server error\",\n  \"type\": \"server_error\"\n}\n</code></pre>"},{"location":"api/endpoints/#response-headers","title":"Response Headers","text":"<p>All responses include:</p> <ul> <li><code>Content-Type: application/json</code></li> <li><code>Access-Control-Allow-Origin: *</code> (or configured origins)</li> </ul>"},{"location":"api/endpoints/#rate-limiting","title":"Rate Limiting","text":"<p>No built-in rate limiting. Implement at proxy level if needed.</p>"},{"location":"api/endpoints/#example-usage","title":"Example Usage","text":""},{"location":"api/endpoints/#using-curl","title":"Using cURL","text":"<pre><code># Get all metrics\ncurl -k https://localhost:5241/metrics\n\n# Get specific metric\ncurl -k https://localhost:5241/metrics/cpu_usage\n\n# With authentication\ncurl -k -H \"X-API-Key: your-api-key\" https://localhost:5241/metrics\n\n# Control scheduler\ncurl -k -X POST \"https://localhost:5241/scheduler/control?action=restart\"\n</code></pre> <p>Note: The <code>-k</code> flag is used to accept self-signed certificates. In production with proper certificates, this flag can be omitted.</p>"},{"location":"api/endpoints/#using-python","title":"Using Python","text":"<pre><code>import requests\n\n# Base configuration\nbase_url = \"https://localhost:5241\"\nheaders = {\"X-API-Key\": \"your-api-key\"}\n\n# Disable SSL verification for self-signed certificates\nrequests.packages.urllib3.disable_warnings()\n\n# Get all metrics\nresponse = requests.get(f\"{base_url}/metrics\", headers=headers, verify=False)\ndata = response.json()\n\n# Get specific log with incremental update\nresponse = requests.get(\n    f\"{base_url}/logs/syslog\",\n    params={\"since_line\": 1000},\n    headers=headers,\n    verify=False\n)\nlog_data = response.json()\n</code></pre>"},{"location":"api/endpoints/#using-javascript","title":"Using JavaScript","text":"<pre><code>// Get all metrics\nconst response = await fetch('https://localhost:5241/metrics', {\n  headers: {\n    'X-API-Key': 'your-api-key'\n  }\n});\nconst data = await response.json();\n\n// Poll for updates\nsetInterval(async () =&gt; {\n  const metrics = await fetch('https://localhost:5241/metrics', {\n    headers: { 'X-API-Key': 'your-api-key' }\n  }).then(r =&gt; r.json());\n  updateDashboard(metrics);\n}, 4000); // Use next_update_sec from response\n</code></pre>"},{"location":"api/endpoints/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration Reference - Configure the API</li> <li>Available Modules - Module descriptions</li> </ul>"},{"location":"api/modules/","title":"Available Modules","text":"2025-06-192025-07-13 <p>DashPad provides several monitoring modules that can be enabled and configured independently.</p>"},{"location":"api/modules/#available-module-types","title":"Available Module Types","text":"<ul> <li>cpu_usage - CPU utilization monitoring</li> <li>ram_usage - Memory usage tracking</li> <li>system_uptime - System runtime display</li> <li>cron_tasks - Scheduled task monitoring</li> <li>logs - System log viewing</li> <li>alerts - Netdata alert integration</li> </ul>"},{"location":"api/modules/#system-metrics","title":"System Metrics","text":""},{"location":"api/modules/#cpu-usage","title":"CPU Usage","text":"<p>Monitor processor utilization.</p> <p>Module Name: <code>cpu_usage</code></p> <p>Data Sources: - <code>direct</code> - Reads from <code>/proc/stat</code> - <code>netdata</code> - Queries Netdata API</p> <p>Response Data: <pre><code>{\n  \"usage_percent\": 45.2\n}\n</code></pre></p> <p>Configuration: <pre><code>{\n  \"metrics\": {\n    \"cpu_usage\": {\n      \"enabled\": true,\n      \"sources\": [\"direct\", \"netdata\"],\n      \"thresholds\": {\n        \"warning\": 80,\n        \"critical\": 90,\n        \"direction\": \"above\"\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/modules/#ram-usage","title":"RAM Usage","text":"<p>Monitor memory consumption and availability.</p> <p>Module Name: <code>ram_usage</code></p> <p>Data Sources: - <code>direct</code> - Reads from <code>/proc/meminfo</code> - <code>netdata</code> - Queries Netdata API</p> <p>Response Data: <pre><code>{\n  \"usage_percent\": 65.4,\n  \"used_mb\": 10464,\n  \"total_mb\": 16000,\n  \"available_mb\": 5536\n}\n</code></pre></p>"},{"location":"api/modules/#system-uptime","title":"System Uptime","text":"<p>Track how long the system has been running.</p> <p>Module Name: <code>system_uptime</code></p> <p>Data Sources: - <code>direct</code> - Reads from <code>/proc/uptime</code> - <code>netdata</code> - Queries Netdata API</p> <p>Response Data: <pre><code>{\n  \"uptime_seconds\": 86400,\n  \"human_readable\": \"1 day, 0 hrs, 0 mins, 0 secs\"\n}\n</code></pre></p>"},{"location":"api/modules/#log-monitoring","title":"Log Monitoring","text":""},{"location":"api/modules/#system-logs","title":"System Logs","text":"<p>Monitor and display system log files with real-time updates.</p> <p>Module Type: <code>logs</code></p> <p>Features: - Configurable line limits - Incremental updates - Data redaction for security</p> <p>Configuration: <pre><code>{\n  \"logs\": {\n    \"syslog\": {\n      \"path\": \"/var/log/syslog\",\n      \"lines\": 100,\n      \"redact_datatype\": [\"ip\", \"email\"]\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/modules/#scheduled-tasks","title":"Scheduled Tasks","text":""},{"location":"api/modules/#cron-monitoring","title":"Cron Monitoring","text":"<p>Display upcoming cron jobs and scheduled tasks.</p> <p>Module Name: <code>cron_tasks</code></p> <p>Features: - Reads system cron directories - Shows next execution time - Task renaming for clarity</p> <p>Response Data: <pre><code>{\n  \"cron_tasks\": [\n    {\n      \"name\": \"Daily Backup\",\n      \"schedule\": \"0 3 * * *\",\n      \"next_run\": \"2025-06-19T03:00:00\",\n      \"relative_time_short\": \"7h43m\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/modules/#alert-integration","title":"Alert Integration","text":""},{"location":"api/modules/#netdata-alerts","title":"Netdata Alerts","text":"<p>Display active system alerts from Netdata monitoring.</p> <p>Module Name: <code>alerts</code></p> <p>Response Data: <pre><code>{\n  \"alerts\": [\n    {\n      \"name\": \"Disk Space Warning\",\n      \"status\": \"WARNING\",\n      \"value\": 85.2,\n      \"units\": \"%\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/modules/#module-status-levels","title":"Module Status Levels","text":"<p>All modules support status levels for visual indicators:</p> Status Description Visual Indicator <code>normal</code> Within thresholds Green <code>warning</code> Approaching limits Yellow <code>critical</code> Exceeded thresholds Red <code>unknown</code> Unable to determine Gray"},{"location":"api/modules/#creating-custom-modules","title":"Creating Custom Modules","text":"<p>Each module follows a standard structure with a coordinator that tries multiple data sources. See the existing modules for examples.</p> <p>Note: Debug logging is currently not functional in the API container.</p>"},{"location":"api/modules/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/modules/#update-intervals","title":"Update Intervals","text":"<p>Different modules have different recommended intervals:</p> Module Type Recommended Interval CPU Usage 2-5 seconds RAM Usage 4-10 seconds System Uptime 30-60 seconds Logs 10-30 seconds Cron Tasks 60 seconds Alerts 15-30 seconds"},{"location":"api/modules/#troubleshooting-modules","title":"Troubleshooting Modules","text":""},{"location":"api/modules/#module-not-appearing","title":"Module Not Appearing","text":"<ol> <li>Check if module is enabled in settings.json</li> <li>Verify source configuration</li> <li>Check API logs for errors</li> <li>Test with <code>/query/{source}/{metric}</code> endpoint</li> </ol>"},{"location":"api/modules/#data-collection-failures","title":"Data Collection Failures","text":"<p>Common issues:</p> Issue Solution Permission denied Ensure proper volume mounts File not found Check path configuration Netdata connection failed Verify Netdata URL"},{"location":"api/modules/#next-steps","title":"Next Steps","text":"<ul> <li>API Configuration - Configure modules</li> <li>Web Interface Guide - Display modules</li> </ul>"},{"location":"api/quick-start/","title":"Quick Start","text":"2025-07-102025-07-13 <p>This guide provides the fastest way to get the DashPad-API container running on your Linux server using Docker Compose. This setup uses default settings and auto-generated credentials to get you started in minutes.</p>"},{"location":"api/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>A Linux Server: The DashPad-API container must run on the Linux-based machine you intend to monitor.</p> </li> <li> <p>Docker &amp; Docker Compose: You must have a working installation of Docker and Docker Compose on the server.</p> </li> </ul>"},{"location":"api/quick-start/#step-1-create-the-docker-compose-file","title":"Step 1: Create the Docker Compose File","text":"<p>On your Linux server, create a new directory for your DashPad configuration (e.g., <code>~/dashpad-api/</code>) and <code>cd</code> into it. Inside that directory, create a file named <code>docker-compose.yml</code> and paste the following content:</p> <pre><code>version: '3.8'\n\nservices:\n  dashpad-api:\n    # Use the official image from GitHub Container Registry\n    image: ghcr.io/mrchrisneal/dashpad-api:latest\n    container_name: dashpad-api\n    restart: unless-stopped\n    # Use host networking for direct access to network interfaces\n    # This makes the container's localhost the same as the host's\n    network_mode: \"host\"\n    # Volumes are required for persistent data and system access\n    volumes:\n      # Mount for persistent data (settings, API key, SSL certs)\n      - ./data:/data\n      # Mount system directories for metric collection (read-only)\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /etc:/host/etc:ro\n      - /var/log:/host/var/log:ro\n    # Set your server's timezone\n    environment:\n      - TZ=America/New_York # IMPORTANT: Change to your server's timezone\n</code></pre> <p>Timezone Setting</p> <p>Remember to change the <code>TZ</code> environment variable in the <code>docker-compose.yml</code> file to match your server's local timezone. You can find a list of valid timezone names here.</p> <p>Why Host Networking?</p> <p>Using <code>network_mode: \"host\"</code> simplifies setup by allowing the container to share the host's network stack. This means you can access the API directly via <code>https://localhost:5241</code> from the host machine without needing to map ports.</p>"},{"location":"api/quick-start/#step-2-launch-the-container","title":"Step 2: Launch the Container","text":"<p>From the directory containing your <code>docker-compose.yml</code> file, run the following command to start the container in the background:</p> <pre><code>docker compose up -d\n</code></pre> <p>Docker will now pull the latest <code>DashPad-API</code> image, create the container, and start the service. On the first run, the container will automatically:</p> <ol> <li> <p>Create a default <code>settings.json</code> file inside the <code>./data</code> directory.</p> </li> <li> <p>Generate a secure, 64-character API key.</p> </li> <li> <p>Generate a self-signed SSL certificate and its fingerprint.</p> </li> </ol>"},{"location":"api/quick-start/#step-3-find-your-api-key-and-ssl-fingerprint","title":"Step 3: Find Your API Key and SSL Fingerprint","text":"<p>The API key and SSL fingerprint are required to connect from DashPad-Web or any other client. They are printed to the container logs on the first startup.</p> <p>View the logs to retrieve them:</p> <pre><code>docker logs dashpad-api\n</code></pre> <p>You will see output similar to this. Copy the API Key and the SSL Fingerprint.</p> <pre><code>============================================================\nSSL CERTIFICATE FINGERPRINT:\nA1:B2:C3:D4:E5:F6:A1:B2:C3:D4:E5:F6:A1:B2:C3:D4:E5:F6:A1:B2:C3:D4:E5:F6:A1:B2:C3:D4:E5:F6:A1:B2\n============================================================\n============================================================\nAPI KEY GENERATED:\n1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\nSaved to: /data/.env\n============================================================\n</code></pre>"},{"location":"api/quick-start/#step-4-verify-the-api-is-running","title":"Step 4: Verify the API is Running","text":"<p>You can test that the API is running correctly by making a <code>curl</code> request from the server. Use the API key you just retrieved.</p> <pre><code># Replace YOUR_API_KEY with the key from the logs\ncurl -k \"https://localhost:5241/health?apikey=YOUR_API_KEY\"\n</code></pre> <p>The <code>-k</code> flag is necessary to allow <code>curl</code> to accept the self-signed certificate. If successful, you should see a JSON response like this:</p> <pre><code>{\n  \"status\": \"ok\",\n  \"server_identity\": \"your-server-hostname\",\n  \"timezone\": { ... },\n  \"server_time\": \"2025-07-10T21:30:00.123-07:00\"\n}\n</code></pre> <p>Congratulations! Your DashPad-API instance is now running and ready to serve data.</p>"},{"location":"api/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Configuration: Learn how to customize data collection, enable/disable modules, and set alert thresholds by editing the <code>settings.json</code> file.</p> </li> <li> <p>API Reference: Explore all the available API endpoints in detail.</p> </li> <li> <p>Connect DashPad-Web: Use your server's IP address (or <code>localhost</code> if on the same machine), the API key, and the SSL fingerprint to configure your DashPad-Web instance.</p> </li> </ul>"},{"location":"devlog/","title":"Devlog","text":""},{"location":"devlog/2025/06/29/devlog-1-hello-world/","title":"Devlog #1: Hello, World!","text":"2025-06-292025-07-13 <p>This section of the documentation may be used in the future to provide detailed changelog information or devlog information. </p> <p>All documentation is still a work-in-progress as of writing.</p> <p>Thanks for stopping by!</p>","tags":["api","web","changelog"]},{"location":"devlog/2025/06/30/devlog-2-dashpad-report/","title":"Devlog #2: DashPad Report","text":"2025-06-302025-07-13 <p>The official GitHub repositories for DashPad have been created, and we're one step closer to becoming a source-available project! While this is a big step forward, all builds and source code will remain private for a while longer as there are still many areas that need refining.</p> <p>What's happening now: The immediate focus is on squashing some final bugs, making a few needed optimizations, and (perhaps most importantly) developing comprehensive documentation to help future users get DashPad up and running on their own systems. Many parts of the module system need more refinement before new features can be added as well.</p> <p>In the meantime, for anyone curious about the project's journey, architecture, and performance, I invite you to check out a recently completed report on hosting this project in a hybrid environment (API container self-hosted, Web container on Google Cloud Platform). It covers everything from the microservices design and cloud deployment process to surprising cost-efficiency of running the application. </p> <p>Read the full report here: DashPad Final Report</p> <p>To be continued! \ud83d\ude0a</p> <p>~ Chris</p>","tags":["api","web","changelog"]},{"location":"web/","title":"DashPad-Web Overview","text":"2025-06-192025-07-13 <p>The DashPad-Web interface is a Svelte 5-based frontend designed primarily for tablet displays, and provides a performant, responsive dashboard for real-time system monitoring. It securely connects to one or more DashPad-API instances to display live metrics, logs, and alerts, turning any spare tablet into a dedicated, always-on monitoring screen. The entire experience is crafted to be lightweight and performant, ensuring it operates effectively even on older hardware.</p> <p>Important Concepts</p> <ul> <li>Purpose: DashPad-Web turns any tablet into a dedicated, real-time monitoring screen for your servers. </li> <li>Stateless &amp; (Near) Real-Time: The web interface has no database, and is limited to the last hour of gathered data. By design, historical graphs are built in your browser, so the device must remain on with the page in focus for data collection.</li> <li>A Display, Not a Database: DashPad is a (near) real-time visualization tool, not a replacement for a full monitoring stack. <ul> <li>For historical data, robust alerting, and in-depth analysis, you should use DashPad in addition to dedicated solutions like Prometheus/Grafana, or Netdata.</li> </ul> </li> <li>Security: DashPad-Web uses a secure proxy for requests to the API container; API keys and credentials are never exposed to the browser. </li> <li>Multi-Server: DashPad-Web can monitor multiple <code>DashPad-API</code> instances from a single dashboard.</li> </ul> <p>In a Hurry? Check out the Quick Start Guide for the fastest way to get up and running.</p>"},{"location":"web/#key-features","title":"Key Features","text":"<ul> <li> <p>Tablet-Optimized Layout: The interface uses a responsive, adjustable grid from 1 to 4 columns to fit any screen size. This ensures optimal use of display real estate on everything from a phone to a large monitor. Module and column widths automatically adapt with orientation, allowing for fluid changes between portrait and landscape modes on portable devices. </p> </li> <li> <p>Multi-Server Monitoring: View metrics and logs from multiple DashPad-API instances in a single, unified dashboard. The <code>startup.sh</code> script inside the Web container reads environment variables that allow you to configure as many servers as you need (up to 50 by default; only 2 servers have been thoroughly tested). This eliminates the need to switch between different tabs or tools to monitor your infrastructure.</p> </li> <li> <p>(Near) Real-Time Updates: The interface uses a clever polling mechanism that adjusts its update frequency based on hints from the API (<code>next_update_sec</code>). This ensures that frequently changing data like CPU metrics are updated quickly, while less volatile data like upcoming cron jobs are polled less often, resulting in a responsive UI that is also highly efficient. </p> </li> <li> <p>Historical Sparklines: Modules that display time-series data (ex. CPU/RAM utilization) feature background sparklines that show performance trends over the last 10 minutes (by default; additional toggles for 5 and 15 minute durations are available). This data is collected and stored directly in browser memory and is capped at 50MB to ensure performance.</p> </li> </ul> <p>By design, all data is stored client-side. The dashboard must remain open and active in your browser to collect, cache, and display all data.</p> <ul> <li> <p>Drag-and-Drop Customization: In \"Edit Layout\" mode, you can easily rearrange modules by dragging and dropping them to create a layout that suits your needs. This functionality is powered by the <code>svelte-dnd-action</code> library, and your custom layout is automatically saved to your browser's <code>localStorage</code>, making it persistent across sessions.</p> </li> <li> <p>Module-Specific Settings: Each module has its own set of configurable options, accessible via a cog icon in the module header. You can toggle autoscroll for logs, customize the color thresholds for CPU and RAM warnings, define keyword highlighting rules for log viewers, or set the number of upcoming cron jobs to display. All display settings can be exported to your clipboard via the Settings pane, and imported later on a different device.</p> </li> </ul>"},{"location":"web/#technology-stack","title":"Technology Stack","text":"<ul> <li> <p>Framework: Built with Svelte 5 for a highly reactive and performant user experience. As the Svelte framework leverages a compiler, it generates highly optimized, minimal vanilla JavaScript, resulting in a small application bundle and fast load times.</p> </li> <li> <p>Web Server: Served by NGINX, which also acts as a secure reverse proxy to the backend API servers. This is a key part of the security model, as NGINX handles injecting authentication headers, ensuring API keys are never exposed to the frontend.</p> </li> <li> <p>State Management: Utilizes Svelte stores with <code>localStorage</code> persistence for UI state, layout, and module configurations. This keeps the application state consistent and preserves user customizations.</p> </li> <li> <p>Charting: Native SVG charts are used as a lightweight visualization solution. This avoids heavy, third-party charting libraries, contributing to the small footprint of the application.</p> </li> </ul>"},{"location":"web/#dashboard-layout-modules","title":"Dashboard Layout &amp; Modules","text":"<p>The dashboard is the core of the web interface. Modules are automatically organized into columns, and the number of columns can be changed with just one tap (or click). The layout is fully persistent across sessions, stored directly in your browser.</p>"},{"location":"web/#available-module-types","title":"Available Module Types","text":"<ul> <li> <p>System Metrics: Modules for CPU and RAM usage, featuring charts for real-time values and historical charts when expanded, giving you an at-a-glance view of system health. Chart durations can be toggled between 5 minutes, 15 minutes, 30 minutes (default), and 60 minutes in the Settings pane; they can be set globally and overridden on a per-module basis.</p> </li> <li> <p>Information Display: A simple module for displaying information (like system <code>uptime</code>) in a human-readable format.</p> </li> <li> <p>Log Viewer: A dedicated module for viewing system and application logs in real-time, with support for custom, hexadecimal color codes and keyword highlighting to make finding important events easier.</p> </li> <li> <p>Task Monitoring: A list-based module that displays upcoming scheduled <code>cron</code> tasks and their relative execution times, helping you anticipate system activity.</p> </li> <li> <p>Alerts: An Alerts module that shows active system warnings and critical alerts from a connected Netdata instance, providing immediate visibility into potential issues. </p> </li> </ul> <p>The alerts module requires an installed and functional Netdata instance.</p>"},{"location":"web/#status-indicators","title":"Status Indicators","text":"<p>At-a-glance status information is conveyed through a simple color-coded system, which is shown primarily as a circular indicator icon within each module (where applicable).</p> <p>\ud83d\udfe2 Green: Normal operation.</p> <p>\ud83d\udfe1 Yellow: Warning state, indicating a potential issue (e.g., high CPU usage).</p> <p>\ud83d\udd34 Red: Critical state, indicating an active problem that requires attention.</p> <p>Modules without threshold logic (such as the <code>uptime</code> module) do not display threshold indicators. Charts also follow a similar default color scheme; they can be customized in the Settings pane. </p> <p>Threshold states (and consequently the indicator colors) are determined by a connected DashPad-API instance. This logic is evaluated by DashPad-API before DashPad-Web receives the information.</p>"},{"location":"web/#real-time-updates","title":"Real-Time Updates","text":"<p>The web interface intelligently polls the DashPad-API container based on <code>next_update_sec</code> hints provided by the API itself. This allows the frontend to adapt its polling frequency dynamically, reducing unnecessary network traffic and server load. Default polling intervals are:</p> <ul> <li> <p>Metrics: ~4 seconds</p> </li> <li> <p>Logs &amp; Alerts: ~30 seconds</p> </li> <li> <p>Cron Tasks: ~60 seconds</p> </li> </ul> <p>What's the minimum configurable update interval?</p> <p>The minimum configurable interval for any data or module type is 2 seconds. </p> <p>Shorter durations tend to cause timing-related bugs and missed updates , while also straining the CPU on the device rendering the dashboard. The 2-second limit represents a deliberate trade-off, prioritizing system stability and a smooth user experience over raw update frequency.</p> <p>If you experience instability or missed updates at this rate, consider increasing the interval to 3 or 4+ seconds to improve stability.</p>"},{"location":"web/#performance","title":"Performance","text":"<p>DashPad strives to be lightweight, making it ideal for older or resource-constrained devices.</p> <ul> <li> <p>Initial Load: The application has a small initial footprint, with a transfer size of under 1MB on first page load.</p> </li> <li> <p>Memory Usage: Active memory consumption of the DashPad-Web container is typically between 10-25MB (on the platform running the container). This is achieved by leveraging an in-memory browser store on the viewing device for historical data rather than a persistent database, which also means the dashboard must remain open to collect trend data.</p> </li> </ul>"},{"location":"web/#security","title":"Security","text":"<p>Security is a core design principle of the web container, handled primarily by the bundled NGINX proxy and the container's <code>startup.sh</code> script:</p> <ul> <li> <p>Proxy-Based Architecture: The web container is (currently) the only component that communicates with API containers. API keys are never sent to the browser. The NGINX proxy injects the required <code>X-API-Key</code> header for each request.</p> </li> <li> <p>Authentication: Access to the web interface is protected by basic authentication (<code>htpasswd</code>), configured via environment variables. This provides a simple but effective layer of security for access to the dashboard.</p> </li> <li> <p>Encryption: Communication is secured with HTTPS. The container generates a self-signed certificate at startup, and it can also validate DashPad-API server certificates via SSL fingerprinting.</p> </li> <li> <p>Masked URLs: To prevent exposing potentially sensitive information in the UI, server URLs are masked, showing only the first few characters of the hostname. </p> </li> </ul> <p>Redacting Log Entries</p> <p>The display of select information can be obfuscated within log modules, including:</p> <ul> <li>Custom strings/keywords </li> <li>Email addresses </li> <li>IP addresses </li> <li>MAC addresses</li> </ul> <p>Note that this is a DashPad-API setting, and must be set on a per-log basis.</p>"},{"location":"web/#deployment","title":"Deployment","text":"<p>The DashPad-Web container is designed to be deployed using Docker, and runs anywhere containers are supported. Unlike DashPad-API, the Web container does not need direct access to your monitored servers; it only requires network access to your DashPad-API container(s). This separation of concerns makes deployment flexible and secure.</p>"},{"location":"web/#cloud-deployment-google-cloud-run","title":"Cloud Deployment (Google Cloud Run)","text":"<p>In addition to local Docker deployments, DashPad-Web is fully compatible with serverless platforms like Google Cloud Run.</p> <p>By setting the container to \"request-based billing\" and permitting it to scale down to zero instances, you are only billed when the dashboard is actively being viewed. Performance testing shows that with request-based billing and minimal resource allocation (0.1 vCPU, 128MB RAM), the container operates with exceptional efficiency: continuous monitoring of two servers at default intervals costs less than $0.03 per day, with projected monthly costs under $1.00 and projected yearly costs under $10.00. This makes DashPad an extremely cost-effective solution for a \"publicly\" accessible, secure monitoring dashboard.</p> <p>Google Cloud Run Deployment Guide</p> <p>More information about deployment on Google Cloud Platform is available in the Google Cloud Run Deployment guide.</p> <p>As a reminder, the DashPad-API container must still be deployed on at least one monitored server. The Web container must have a data source.</p>"},{"location":"web/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Configuration Guide: Learn how to set up and configure the web container.</p> </li> <li> <p>Usage Guide: Explore the features of the dashboard and settings panel.</p> </li> <li> <p>Troubleshooting Guide: Find solutions to common issues.</p> </li> </ul>"},{"location":"web/configuration/","title":"Configuration","text":"2025-06-192025-07-13 <p>This guide provides a comprehensive reference for all the environment variables used to configure the DashPad-Web container. A proper configuration is key to tailoring the dashboard to your specific needs, from defining API servers to enhancing security.</p> <p>All configuration for the DashPad-Web container is managed exclusively through environment variables. This design choice provides maximum flexibility, allowing you to use the same Docker image across different environments without any changes. It simplifies deployments for local setups using docker run or Docker Compose, and is especially powerful for cloud-based platforms where environment variables are the standard for injecting configuration.</p> <p>Important Concepts</p> <ul> <li>Configuration Method: All settings for the DashPad-Web container are managed exclusively through environment variables.</li> <li>Server Definitions: Define each <code>DashPad-API</code> server you wish to monitor using a sequentially numbered block of variables (e.g., <code>SERVER1_...</code>, <code>SERVER2_...</code>, etc.).</li> <li>Reference Example: Full <code>docker-compose.yml</code> examples for Linux and unRAID servers are provided at the end of this guide.</li> </ul>"},{"location":"web/configuration/#configuration-summary","title":"Configuration Summary","text":"<p>The following tables provide a quick reference for all available environment variables. While many variables are (hopefully!) somewhat self-explanatory, detailed explanations for each variable can be found in the Variable Details section below.</p>"},{"location":"web/configuration/#core-configuration","title":"Core Configuration","text":"Variable Default Example <code>AUTH_USERNAME</code> <code>user</code> <code>-e AUTH_USERNAME=admin</code> <code>AUTH_PASSWORD</code> <code>password</code> <code>-e AUTH_PASSWORD=mysecret</code> <code>USE_HTTPS</code> <code>true</code> <code>-e USE_HTTPS=false</code> <code>PORT</code> <code>5240</code> <code>-e PORT=8080</code>"},{"location":"web/configuration/#server-definitions","title":"Server Definitions","text":"Variable Required Example <code>SERVERX_NAME</code> Yes <code>-e SERVER1_NAME=unraid</code> <code>SERVERX_URL</code> Yes <code>-e SERVER1_URL=https://192.168.1.100:5241</code> <code>SERVERX_KEY</code> Yes <code>-e SERVER1_KEY=a1b2...</code> <code>SERVERX_SSLFINGERPRINT</code> No <code>-e SERVER1_SSLFINGERPRINT=AA:BB...</code> <p>Server Numbering</p> <p>When configuring servers, it is important to replace the \"X\" in all <code>SERVERX_</code> variables with a number. The numbering should be sequential, beginning with <code>SERVER1_</code>, followed by <code>SERVER2_</code>, and so on:</p> <ul> <li><code>SERVER1_NAME</code></li> <li><code>SERVER1_URL</code></li> <li><code>SERVER1_KEY</code></li> <li><code>SERVER2_NAME</code></li> <li><code>SERVER2_URL</code></li> <li><code>SERVER2_KEY</code></li> <li>...</li> </ul>"},{"location":"web/configuration/#security-configuration","title":"Security Configuration","text":"Variable Default Example <code>SKIP_SSL_FINGERPRINT_VERIFICATION</code> <code>false</code> <code>-e SKIP_SSL_FINGERPRINT_VERIFICATION=true</code>"},{"location":"web/configuration/#development-configuration","title":"Development Configuration","text":"Variable Default Example <code>DEVELOPMENT_MODE</code> <code>false</code> <code>-e DEVELOPMENT_MODE=true</code>"},{"location":"web/configuration/#variable-details","title":"Variable Details","text":""},{"location":"web/configuration/#core-variables","title":"Core Variables","text":"<ul> <li><code>AUTH_USERNAME</code>: The username required to access the web UI via Basic Authentication. It is highly recommended to change this from the default value for any deployment.</li> <li><code>AUTH_PASSWORD</code>: The password required for web UI access. Always change this to a strong, unique password.</li> <li><code>USE_HTTPS</code>: Toggles HTTPS for the web UI. If set to <code>false</code>, the container serves content over HTTP. This should only be done if you are running DashPad-Web behind another reverse proxy (like Traefik or Nginx Proxy Manager--or on a service like Google Cloud Run) that is already handling SSL termination.</li> <li><code>PORT</code>: The internal port that the NGINX server listens on inside the container. You map a host port to this value in your Docker command (e.g., <code>-p 8080:5240</code> would make the UI accessible on port 8080 on your host).</li> </ul>"},{"location":"web/configuration/#server-definition-variables","title":"Server Definition Variables","text":"<p>These variables must be defined in sequential blocks for each <code>DashPad-API</code> instance you wish to monitor.</p> <ul> <li><code>SERVERX_NAME</code>: A unique, friendly name for the server (e.g., <code>main-server</code>, <code>backup-nas</code>). This name is used for display purposes in the UI and should not contain spaces or special characters (dashes are okay).</li> <li><code>SERVERX_URL</code>: The full HTTPS URL of the <code>DashPad-API</code> instance. The connection from DashPad-Web to the API is always encrypted, so this must start with <code>https://</code>.</li> <li><code>SERVERX_KEY</code>: The 64-character hexadecimal API key generated by the corresponding <code>DashPad-API</code> instance. On startup, the container performs a test connection to validate this key. If validation fails, the server will be disabled for monitoring.</li> <li><code>SERVERX_SSLFINGERPRINT</code>: The SHA-256 fingerprint of the API server's SSL certificate. This is the most secure way to ensure you are connecting to the correct server and is highly recommended for production environments.</li> </ul> <p>Remember to replace the \"X\" in all <code>SERVERX_</code> variables with a number as described previously.</p> <p>Obtaining An SSL Fingerprint</p> <p>You can get the SHA-256 fingerprint directly from your <code>DashPad-API</code> container's logs on its first startup. Alternatively, you can use this <code>openssl</code> command from a machine that can reach the API server: <pre><code>openssl s_client -connect &lt;API_HOST&gt;:&lt;API_PORT&gt; -showcerts &lt;/dev/null 2&gt;/dev/null | openssl x509 -fingerprint -sha256 -noout -in /dev/stdin\n</code></pre> Make sure to replace <code>&lt;API_HOST&gt;</code> and <code>&lt;API_PORT&gt;</code> with your server's information!</p>"},{"location":"web/configuration/#security-variable","title":"Security Variable","text":"<ul> <li><code>SKIP_SSL_FINGERPRINT_VERIFICATION</code>: If set to <code>true</code>, the container will not validate the SSL certificate fingerprints of the backend API servers. This is useful for quick tests or in environments with frequently changing certificates, but it is not recommended for production environments.</li> </ul> <p>Production Security</p> <p>For any production environment, you should always set <code>SKIP_SSL_FINGERPRINT_VERIFICATION</code> to <code>false</code> and provide the correct <code>SSLFINGERPRINT</code> for each server. The fingerprint is a unique identifier for your API server's certificate. Verifying it ensures that you are establishing a secure connection to a trusted endpoint and helps protects your API keys from being exposed in a man-in-the-middle (MITM) attack.</p>"},{"location":"web/configuration/#development-variable","title":"Development Variable","text":"<ul> <li><code>DEVELOPMENT_MODE</code>: If set to <code>true</code>, this disables authentication for source maps and other asset files, making it easier to use browser-based debugging tools to inspect the original Svelte code. This parameter can significantly impact overall performance and should never be enabled in a production environment.</li> </ul>"},{"location":"web/configuration/#full-docker-compose-example","title":"Full Docker Compose Example","text":"<p>Here are complete <code>docker-compose.yml</code> examples for a production-ready, two-server setup.</p> Linux (Generic)unRAID <pre><code>version: '3.8'\n\nservices:\n  dashpad-web:\n    image: dashpad-web:latest\n    container_name: dashpad-web\n    ports:\n      # Map the default port 5240 on the host to 5240 in the container\n      - \"5240:5240\"\n    volumes:\n      # Use a named volume for persistent SSL certificate caching.\n      # This improves startup performance and resilience.\n      - dashpad-web:/data\n    environment:\n      # --- Authentication: Change these to secure credentials ---\n      - AUTH_USERNAME=admin\n      - AUTH_PASSWORD=a-very-secure-password\n\n      # --- Security: Set to false for production ---\n      - SKIP_SSL_FINGERPRINT_VERIFICATION=false\n\n      # --- Server 1: Primary NAS ---\n      - SERVER1_NAME=primary-nas\n      - SERVER1_URL=https://192.168.1.101:5241\n      - SERVER1_KEY=a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2\n      - SERVER1_SSLFINGERPRINT=AA:BB:CC:DD:EE:FF:11:22:33:44:55:66:77:88:99:00:AA:BB:CC:DD:EE:FF:11:22:33:44:55:66:77:88:99:00\n\n      # --- Server 2: Media Server ---\n      - SERVER2_NAME=media-server\n      - SERVER2_URL=https://192.168.1.102:5241\n      - SERVER2_KEY=f6e5d4c3b2a1f6e5d4c3b2a1f6e5d4c3b2a1f6e5d4c3b2a1f6e5d4c3b2a1f6e5\n      - SERVER2_SSLFINGERPRINT=00:99:88:77:66:55:44:33:22:11:FF:EE:DD:CC:BB:AA:00:99:88:77:66:55:44:33:22:11:FF:EE:DD:CC:BB:AA\n\n    restart: unless-stopped\n\n# Define the named volume for data persistence. Docker will manage this volume.\nvolumes:\n  dashpad-web: {}\n</code></pre> <pre><code>version: '3.8'\n\nservices:\n  dashpad-web:\n    image: dashpad-web:latest\n    container_name: dashpad-web\n    ports:\n      # Map the default port 5240 on the host to 5240 in the container\n      - \"5240:5240\"\n    volumes:\n      # For unRAID, it is recommended to use a host path mount\n      # to the appdata share for easier management.\n      - /mnt/user/appdata/dashpad-web:/data\n    environment:\n      # --- Authentication: Change these to secure credentials ---\n      - AUTH_USERNAME=admin\n      - AUTH_PASSWORD=a-very-secure-password\n\n      # --- Security: Set to false for production ---\n      - SKIP_SSL_FINGERPRINT_VERIFICATION=false\n\n      # --- Server 1: unRAID Server ---\n      - SERVER1_NAME=unraid-server\n      - SERVER1_URL=https://192.168.1.101:5241\n      - SERVER1_KEY=a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2\n      - SERVER1_SSLFINGERPRINT=AA:BB:CC:DD:EE:FF:11:22:33:44:55:66:77:88:99:00:AA:BB:CC:DD:EE:FF:11:22:33:44:55:66:77:88:99:00\n\n      # --- Server 2: Media Server ---\n      - SERVER2_NAME=media-server\n      - SERVER2_URL=https://192.168.1.102:5241\n      - SERVER2_KEY=f6e5d4c3b2a1f6e5d4c3b2a1f6e5d4c3b2a1f6e5d4c3b2a1f6e5d4c3b2a1f6e5\n      - SERVER2_SSLFINGERPRINT=00:99:88:77:66:55:44:33:22:11:FF:EE:DD:CC:BB:AA:00:99:88:77:66:55:44:33:22:11:FF:EE:DD:CC:BB:AA\n\n    restart: unless-stopped\n</code></pre> <p>Why is a Volume Recommended?</p> <p>While all primary configuration is indeed handled by environment variables, mounting a volume to the <code>/data</code> directory inside the container is recommended for two key reasons:</p> <ol> <li>Performance: The container caches the SSL certificates of your backend API servers in the <code>/data</code> directory. By using a persistent volume, the container can reuse these certificates on restart, which significantly speeds up the startup process, especially in multi-server setups.</li> <li>Resilience: If an API server is temporarily offline when you restart the DashPad-Web container, having a cached certificate allows the container to start up successfully and continue monitoring your other online servers. Without a volume, the startup would fail for that server until it comes back online.</li> </ol> <p>You can run the container without a volume (it will operate in \"ephemeral mode\"), but you will see a warning in the logs, and performance will be reduced on every restart.</p>"},{"location":"web/quick-start/","title":"Quick Start","text":"2025-06-292025-07-13 <p>This guide will walk you through the fastest way to get the DashPad-Web interface up and running using Docker Compose on your local server.</p>"},{"location":"web/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, please ensure you have the following:</p> <ol> <li> <p>Docker and Docker Compose: You must have a working installation of Docker (and ideally Docker Compose) on your system.</p> </li> <li> <p>A Running DashPad-API Instance: This guide assumes you have at least one <code>DashPad-API</code> container running and accessible on your network. </p> </li> </ol> <p>Is DashPad-API Running?</p> <p>If you haven't set up or started at least one instance of <code>DashPad-API</code> yet, please follow the DashPad-API documentation before continuing. Ensure it is reachable from the environment hosting DashPad-Web.</p>"},{"location":"web/quick-start/#step-1-create-the-docker-compose-file","title":"Step 1: Create the Docker Compose File","text":"<p>Oreate a new file named <code>docker-compose.yml</code> and paste the following content into it. This file defines the DashPad-Web service and all the necessary configurations.</p> LinuxunRAID <pre><code># TODO: Update the image URL below once it is published on GitHub.\n# For now, this assumes you have built the image locally.\nversion: '3.8'\n\nservices:\n  dashpad-web:\n    image: dashpad-web:latest\n    container_name: dashpad-web\n    ports:\n      - \"5240:5240\" \n    # TODO: Update port numbers\n    # The 'volumes' section maps a host directory to a directory inside the container.\n    # It is highly recommended for performance, as it caches SSL certificates.\n    volumes:\n      - ./dashpad-web:/data\n    environment:\n      # --- Web Interface Authentication ---\n      - AUTH_USERNAME=username\n      - AUTH_PASSWORD=password\n\n      # --- API Server Configuration ---\n      - SERVER1_NAME=my-server\n      - SERVER1_URL=https://&lt;REPLACE_WITH_API_IP&gt;:&lt;REPLACE_WITH_API_PORT&gt;\n      - SERVER1_KEY=&lt;REPLACE_WITH_YOUR_64_CHARACTER_API_KEY&gt;\n\n      # To add more servers, copy the three lines above and increment the number.\n      # For example, for a second server, you would add:\n      # - SERVER2_NAME=another-server\n      # - SERVER2_URL=https://&lt;IP_OF_SECOND_SERVER&gt;:&lt;PORT&gt;\n      # - SERVER2_KEY=&lt;API_KEY_FOR_SECOND_SERVER&gt;\n\n      # --- Security Settings for Quick Start ---\n      # TODO: This variable is used to bypass a buggy SSL fingerprinting feature.\n      # The underlying bugs should be addressed in a future version.\n      - SKIP_SSL_FINGERPRINT_VERIFICATION=true\n    restart: unless-stopped\n</code></pre> <pre><code># TODO: Update the image URL below once it is published on GitHub.\n# For now, this assumes you have built the image locally.\nversion: '3.8'\n\nservices:\n  dashpad-web:\n    image: dashpad-web:latest\n    container_name: dashpad-web\n    ports:\n      - \"5240:5240\"\n    # TODO: Update port numbers\n    # The 'volumes' section maps a host directory to a directory inside the container.\n    # It is highly recommended for performance, as it caches SSL certificates.\n    volumes:\n      - /mnt/user/appdata/dashpad-web:/data\n    environment:\n      # --- Web Interface Authentication ---\n      - AUTH_USERNAME=username\n      - AUTH_PASSWORD=password\n\n      # --- API Server Configuration ---\n      - SERVER1_NAME=my-server\n      - SERVER1_URL=https://&lt;REPLACE_WITH_API_IP&gt;:&lt;REPLACE_WITH_API_PORT&gt;\n      - SERVER1_KEY=&lt;REPLACE_WITH_YOUR_64_CHARACTER_API_KEY&gt;\n\n      # To add more servers, copy the three lines above and increment the number.\n      # For example, for a second server, you would add:\n      # - SERVER2_NAME=another-server\n      # - SERVER2_URL=https://&lt;IP_OF_SECOND_SERVER&gt;:&lt;PORT&gt;\n      # - SERVER2_KEY=&lt;API_KEY_FOR_SECOND_SERVER&gt;\n\n      # --- Security Settings for Quick Start ---\n      # TODO: This variable is used to bypass a buggy SSL fingerprinting feature.\n      # The underlying bugs should be addressed in a future version.\n      - SKIP_SSL_FINGERPRINT_VERIFICATION=true\n    restart: unless-stopped\n</code></pre>"},{"location":"web/quick-start/#step-2-configure-your-server","title":"Step 2: Configure Your Server","text":"<p>While you may want to configure the <code>SERVER1_NAME</code> variable, you only need to change two lines in the <code>environment</code> section of the <code>docker-compose.yml</code> file you just created:</p> <ol> <li> <p><code>SERVER1_URL</code>: Replace <code>&lt;REPLACE_WITH_API_IP&gt;:&lt;REPLACE_WITH_API_PORT&gt;</code> with the actual HTTPS URL of your running <code>DashPad-API</code> instance.</p> </li> <li> <p><code>SERVER1_KEY</code>: Replace <code>&lt;REPLACE_WITH_YOUR_64_CHARACTER_API_KEY&gt;</code> with the API key provided by your <code>DashPad-API</code> container.</p> </li> </ol> <p>Persistent vs. Ephemeral Storage</p> <p>The volumes section in the docker-compose.yml is recommended but optional.</p> <p>With a volume (Recommended): SSL certificates from your API servers are cached in the dashpad-web directory. This makes container restarts much faster.</p> <p>Without a volume: The container will run in \"ephemeral mode\" and re-download all certificates on every restart. You will see a warning in the DashPad-Web container logs if this happens.</p> <p>Security Notice: SSL Verification</p> <p>For this quick start, we are setting <code>SKIP_SSL_FINGERPRINT_VERIFICATION</code> to <code>true</code>. This simplifies the initial setup but is not recommended for production. </p> <p>Once your dashboard is running, you should disable this option and provide the correct <code>SERVER1_SSLFINGERPRINT</code> for each server to ensure you are connecting to the correct, trusted API endpoint.</p>"},{"location":"web/quick-start/#step-3-launch-the-container","title":"Step 3: Launch the Container","text":"<p>Save the changes to your <code>docker-compose.yml</code> file. Now, open a terminal in the same directory and run the following command:</p> <pre><code>docker compose up -d\n</code></pre> <p>Docker will now pull (or use the local) image, create the container, and start the DashPad-Web service in the background. If you included the volumes section, it will also create a dashpad-web directory in the same folder to store SSL certificate data.</p>"},{"location":"web/quick-start/#step-4-access-your-dashboard","title":"Step 4: Access Your Dashboard","text":"<p>Once the container is running, open your web browser and navigate to:</p> <p><code>http://&lt;your_docker_host_ip&gt;:5240</code></p> <p>You will be prompted for a username and password. Use the credentials you specified in the <code>docker-compose.yml</code> file.</p> <p>You should now see the DashPad dashboard, and it will begin populating with data from your API server!</p>"},{"location":"web/quick-start/#next-steps","title":"Next Steps","text":"<p>This guide covers the most basic setup. To learn about all the available environment variables, including how to add more servers, configure HTTPS, and enable proper SSL fingerprinting, please see the full Configuration Guide.</p>"},{"location":"web/troubleshooting/","title":"Troubleshooting","text":"2025-07-072025-07-13 <p>This guide provides solutions to common issues you might encounter while setting up or using the DashPad-Web interface.</p>"},{"location":"web/troubleshooting/#the-dashboard-is-empty-no-modules-are-appearing","title":"The Dashboard is Empty / No Modules are Appearing","text":"<p>This is the most common issue after initial setup. It almost always indicates a problem with the server definitions in your configuration.</p> <p>Cause: The DashPad-Web container failed to connect to or validate any of the <code>DashPad-API</code> servers defined in your environment variables.</p> <p>Solution:</p> <ol> <li> <p>Check the Container Logs: The first step is always to check the logs of your <code>dashpad-web</code> container.</p> <pre><code>docker logs dashpad-web\n</code></pre> </li> <li> <p>Look for error messages during the startup sequence, such as <code>API key authentication failed</code>, <code>Certificate fingerprint mismatch</code>, or <code>Unable to connect to API server</code>. The logs will tell you exactly which server failed and why.</p> </li> <li> <p>Verify Server Configuration: Open your <code>docker-compose.yml</code> or check your <code>docker run</code> command and carefully verify the <code>SERVERX_...</code> variables for the failing server:</p> <ul> <li> <p>Is the <code>SERVERX_URL</code> correct and reachable from your DashPad-Web container? Remember to use the <code>https://</code> prefix and the correct port (<code>5241</code> by default for the API).</p> </li> <li> <p>Is the <code>SERVERX_KEY</code> an exact, 64-character hexadecimal string?</p> </li> <li> <p>Are the variables numbered sequentially (e.g., <code>SERVER1_...</code>, <code>SERVER2_...</code>)?</p> </li> </ul> </li> </ol>"},{"location":"web/troubleshooting/#authentication-error-401-unauthorized","title":"Authentication Error (401 Unauthorized)","text":"<p>Symptom: The dashboard loads, but a specific server module shows an \"Authentication Error\" or \"401 Unauthorized\" message.</p> <p>Cause: The <code>SERVERX_KEY</code> provided for that server is incorrect or has expired.</p> <p>Solution:</p> <ol> <li>Retrieve the correct, current API key from the logs of the corresponding <code>DashPad-API</code> container.</li> <li>Update the <code>SERVERX_KEY</code> environment variable in your <code>docker-compose.yml</code> file for the specific server that is failing.</li> <li>Restart the <code>dashpad-web</code> container: <code>docker compose up -d --force-recreate</code>.</li> </ol>"},{"location":"web/troubleshooting/#network-error-or-server-unreachable","title":"Network Error or Server Unreachable","text":"<p>Symptom: A server module shows a \"Network Error,\" \"502 Bad Gateway,\" or \"Server Unreachable\" message.</p> <p>Cause: The DashPad-Web container cannot establish a network connection to the <code>DashPad-API</code> container.</p> <p>Solution:</p> <ol> <li>Check API Container: Ensure the <code>DashPad-API</code> container is running and healthy on its host machine.</li> <li>Verify URL and Port: Double-check the <code>SERVERX_URL</code>. Make sure the IP address and port are correct.</li> <li>Check Firewalls: Ensure that there are no firewall rules on your host or network blocking the connection from the DashPad-Web container to the DashPad-API container on its specified port.</li> </ol>"},{"location":"web/troubleshooting/#ssl-fingerprint-mismatch","title":"SSL Fingerprint Mismatch","text":"<p>Symptom: The container logs show a <code>Certificate fingerprint mismatch</code> error for a specific server, and that server's modules do not appear on the dashboard.</p> <p>Cause: The SSL certificate of the <code>DashPad-API</code> server has changed, and its new fingerprint no longer matches the <code>SERVERX_SSLFINGERPRINT</code> value you provided. This can happen if the API container was recreated and generated a new self-signed certificate.</p> <p>Solution:</p> <ol> <li>Get the new, correct fingerprint from the <code>DashPad-API</code> container's logs.</li> <li>Update the <code>SERVERX_SSLFINGERPRINT</code> value in your <code>docker-compose.yml</code> file.</li> <li>Restart the <code>dashpad-web</code> container.</li> </ol> <p>Quick Fix vs. Secure Fix</p> <p>As a temporary fix, you can set <code>SKIP_SSL_FINGERPRINT_VERIFICATION=true</code> to bypass this check. However, for security, it is always recommended to use the correct fingerprint.</p>"},{"location":"web/troubleshooting/#layout-or-settings-are-not-saving","title":"Layout or Settings Are Not Saving","text":"<p>Symptom: You rearrange modules or change settings, but they revert back to the default state after you refresh the page.</p> <p>Cause: DashPad-Web saves all UI customizations to your browser's <code>localStorage</code>. This issue occurs if <code>localStorage</code> is disabled or not functioning correctly.</p> <p>Solution:</p> <ol> <li>Check Browser Mode: Ensure you are not in a \"Private\" or \"Incognito\" browsing mode, as these modes often restrict or clear <code>localStorage</code>.</li> <li>Enable Cookies/Site Data: Make sure your browser is configured to allow sites to save data.</li> <li>Clear Site Data: As a last resort, you can try clearing all site data for your DashPad URL through your browser's developer tools or settings, and then reconfigure your layout.</li> </ol>"},{"location":"web/usage/","title":"Usage","text":"2025-07-012025-07-13 <p>This guide covers day-to-day use of the DashPad-Web interface. Once you have successfully deployed and configured your container (perhaps using the Quick Start or Configuration guides), this document will help you utilize DashPad to its full potential.</p>"},{"location":"web/usage/#navigating-the-dashboard","title":"Navigating the Dashboard","text":"<p>The main dashboard is composed of a header containing global controls, a bar beneath it that displays currently monitored servers (if multiple are configured), and of course, a grid of monitoring modules. The dashboard is designed to be left open on a dedicated display (like an older tablet!) providing you with an always-on, at-a-glance view of your systems' health.</p>"},{"location":"web/usage/#header-bar-controls","title":"Header Bar Controls","text":"<p>At the top of the page are the main controls for the dashboard:</p> <ul> <li> <p>Columns (1, 2, 3, 4): These buttons allow you to manually set the number of columns in the dashboard grid. This is particularly useful for forcing a dense, multi-column layout on a high-resolution tablet. Like other options, your selection is saved automatically and will persist across browser sessions.</p> </li> <li> <p>Edit Layout: This toggle button activates \"Edit Mode,\" which unlocks the dashboard grid, allowing you to customize the position and settings of your modules. When active, modules will become draggable, and additional controls will become visible.</p> </li> <li> <p>Reset Dashboard: This button will reset all of your dashboard customizations, including the module layout and all per-module settings, back to their default state.</p> </li> <li> <p>Settings: This button opens the main settings panel, where you can manage global application preferences like server connections and appearance.</p> </li> </ul>"},{"location":"web/usage/#interacting-with-modules","title":"Interacting with Modules","text":"<p>Each module on the dashboard is a self-contained, interactive component that provides a specific piece of information.</p> <ul> <li> <p>Expand/Collapse: Click anywhere on a module's header to expand it for a detailed view or collapse it to save space. For example, expanding a CPU module will reveal a detailed historical chart, while the collapsed view shows a compact summary.</p> </li> <li> <p>Status Indicators: The color-coded indicator in the (top) left of (applicable) modules indicates the current status of the metric being monitored. </p> </li> </ul> <p>Regarding Thresholds</p> <p>The state (and therefore the color) of the status indicator is not determined by the web interface itself. Instead, this is passed directly from the <code>DashPad-API</code> instance, which is responsible for evaluating the data against predefined thresholds. This ensures that the status logic is centralized and consistent.</p>"},{"location":"web/usage/#customizing-the-layout","title":"Customizing the Layout","text":"<p>DashPad allows you to create a layout that is perfectly tailored to your needs. The drag-and-drop functionality makes it intuitive to organize your dashboard exactly how you want it.</p> <ol> <li> <p>Activate Edit Mode: Click the Edit Layout button in the header bar. The dashboard will enter a state where you can move modules. You'll notice that the modules are now visually distinct, indicating they can be interacted with.</p> </li> <li> <p>Drag and Drop: Simply click and hold on any module's header and drag it to a new position. You can move modules within the same column or to a different column entirely. As you drag, a placeholder will show you where the module will be placed.</p> </li> <li> <p>Save Layout: Your changes are saved automatically and instantly to your browser's <code>localStorage</code> as you make them. There is no \"save\" button to press; your layout is always up-to-date.</p> </li> <li> <p>Exit Edit Mode: Click the Edit Layout button again to lock the layout in place and return to the normal viewing mode.</p> </li> </ol> <p>Plan Your Layout for Different Devices</p> <p>Since the layout configuration is stored in your browser's <code>localStorage</code>, it is unique to each device and browser. This allows you to create different layouts optimized for different screens. For example, you might have a dense 4-column layout on your desktop monitor but a simpler 2-column layout on a wall-mounted tablet.</p>"},{"location":"web/usage/#the-main-settings-panel","title":"The Main Settings Panel","text":"<p>Clicking the global Settings (cog) icon in the header bar opens a panel with several configuration tabs, giving you control over the entire application's behavior.</p> <ul> <li> <p>Server Management: This tab lists all the API servers you configured with environment variables. Here, you can temporarily enable or disable polling for any server. </p> </li> <li> <p>Appearance Settings: Customize the look and feel of your charts. You can change the default colors used for \"Normal,\" \"Warning,\" and \"Critical\" statuses. These color settings apply to both the detailed expanded charts and the subtle background sparklines, allowing you to create a theme that matches your preferences.</p> </li> <li> <p>Historical Data: Configure the time windows for your charts. You can set the global default duration for expanded charts (ex. 30 minutes) and the duration for the background sparklines (ex. 10 minutes). These settings help you balance between viewing long-term trends and focusing on recent activity.</p> </li> <li> <p>Import/Export: This powerful feature allows you to back up your entire UI configuration\u2014including the module layout, server visibility states, and all global and module-specific settings\u2014to a single JSON file stored directly in your clipboard. You can then use the \"Import\" function to restore this configuration on a different browser or device, making it easy to replicate your setup.</p> </li> </ul>"},{"location":"web/usage/#module-specific-settings","title":"Module-Specific Settings","text":"<p>You can override global settings for individual (applicable) modules to create a highly customized view. This allows for granular control over how data is presented.</p> <p>Accessing Module Settings</p> <p>There are two ways to access settings for a specific module:</p> <ol> <li>General Method (Edit Mode): First, enter Edit Layout mode. A new cog icon will appear in the header of each module. Clicking this will open its specific settings panel.</li> <li>Metric Modules (CPU/RAM): For modules that display charts, you can also click the duration chip (ex. \"30m\") in the top-right corner of the expanded view to directly open the chart duration settings for that module.</li> </ol>"},{"location":"web/usage/#log-module-settings","title":"Log Module Settings","text":"<ul> <li>Autoscroll: Toggles whether the log view automatically scrolls to the bottom as new lines arrive, which is ideal for tailing live logs. The toggle icon is a filled, green \"play\" button when autoscroll is active, and a gray, outlined button when it is disabled.</li> </ul> <p>To prevent you from losing your place while reviewing past events, autoscroll will automatically disengage if you manually scroll up within the log window. Just toggle it back on when you're ready!</p> <ul> <li>Highlight Rules: Define custom keywords (ex. \"error\", \"failed\", \"success\") and assign specific colors to them. This makes it much easier to spot important events in a stream of log entries.</li> </ul>"},{"location":"web/usage/#metric-module-cpuram-settings","title":"Metric Module (CPU/RAM) Settings","text":"<ul> <li> <p>Chart Duration: Override the global chart duration to show more or less historical data for a specific metric. For example, you might want to see a 60-minute view for RAM usage but only a 15-minute view for CPU to focus on recent spikes.</p> </li> <li> <p>Autoscale: By default, metric charts have a fixed Y-axis (ex. 0% to 100% for CPU). Enabling autoscale will cause the Y-axis to dynamically adjust to the minimum and maximum values currently visible in the chart.</p> </li> </ul>"},{"location":"web/usage/#alerts-module-settings","title":"Alerts Module Settings","text":"<ul> <li> <p>Show Past Alerts: Choose whether to display alerts that have already been resolved. This can be helpful for understanding recent system events.</p> </li> <li> <p>History Limit: Set the maximum number of past alerts to keep in the view, preventing the list from becoming cluttered.</p> </li> </ul>"},{"location":"web/deployment/cloud-run/","title":"Deployment - Google Cloud Run","text":"2025-06-262025-07-13 <p>Deploy the DashPad-Web container to Google Cloud Run for cloud-based dashboard access.</p> <p>Only the Web container can be deployed to Cloud Run. The API container must be run on actual servers, as it needs direct filesystem access to collect metrics and system information.</p>"},{"location":"web/deployment/cloud-run/#prerequisites","title":"Prerequisites","text":"<ul> <li>Google Cloud account with billing enabled</li> <li><code>gcloud</code> CLI installed</li> <li>API containers running on your servers</li> <li>Domain name (optional)</li> </ul>"},{"location":"web/deployment/cloud-run/#deployment-steps","title":"Deployment Steps","text":""},{"location":"web/deployment/cloud-run/#1-set-up-project","title":"1. Set Up Project","text":"<pre><code># Set project variables\nexport PROJECT_ID=\"your-project-id\"\nexport REGION=\"us-central1\"\n\n# Enable required APIs\ngcloud services enable run.googleapis.com\n</code></pre>"},{"location":"web/deployment/cloud-run/#2-build-and-deploy-web-container","title":"2. Build and Deploy Web Container","text":"<pre><code># Clone repository\ngit clone https://github.com/mrchrisneal/DashPad-Web\ncd DashPad-Web\n\n# Build and submit to Cloud Build\ngcloud builds submit --tag gcr.io/$PROJECT_ID/dashpad-web\n\n# Deploy to Cloud Run\ngcloud run deploy dashpad-web \\\n  --image gcr.io/$PROJECT_ID/dashpad-web \\\n  --platform managed \\\n  --region $REGION \\\n  --allow-unauthenticated \\\n  --port 80 \\\n  --set-env-vars \"DASHPAD_SERVERS=http://your-server:8000|Server Name\"\n</code></pre>"},{"location":"web/deployment/cloud-run/#3-configure-environment-variables","title":"3. Configure Environment Variables","text":"<p>Set your server configurations when deploying:</p> <pre><code># Single server\ngcloud run deploy dashpad-web \\\n  --set-env-vars \"LISTEN_PORT=443,USE_HTTPS=true,AUTH_USERNAME=admin,AUTH_PASSWORD=password,SERVER1_NAME=Home Server,SERVER1_URL=https://your-server:5241,SERVER1_KEY=your-api-key,SERVER1_SSLFINGERPRINT=your-ssl-fingerprint\"\n\n# Multiple servers\ngcloud run deploy dashpad-web \\\n  --set-env-vars \"LISTEN_PORT=443,USE_HTTPS=true,AUTH_USERNAME=admin,AUTH_PASSWORD=password,SERVER1_NAME=Server 1,SERVER1_URL=https://server1:5241,SERVER1_KEY=key1,SERVER1_SSLFINGERPRINT=fp1,SERVER2_NAME=Server 2,SERVER2_URL=https://server2:5241,SERVER2_KEY=key2,SERVER2_SSLFINGERPRINT=fp2\"\n</code></pre>"},{"location":"web/deployment/cloud-run/#custom-domain-optional","title":"Custom Domain (Optional)","text":"<p>Map a custom domain:</p> <pre><code>gcloud run domain-mappings create \\\n  --service dashpad-web \\\n  --domain your-domain.com \\\n  --region $REGION\n</code></pre> <p>Update DNS records as instructed.</p>"},{"location":"web/deployment/cloud-run/#security-considerations","title":"Security Considerations","text":""},{"location":"web/deployment/cloud-run/#api-access","title":"API Access","text":"<p>Your API containers must be accessible from Cloud Run:</p> <ul> <li>Use public IPs with strong API keys</li> <li>Set up Cloud VPN for private access</li> <li>Use a reverse proxy with authentication</li> </ul>"},{"location":"web/deployment/cloud-run/#authentication","title":"Authentication","text":"<p>The Web container includes basic authentication:</p> <pre><code>--set-env-vars \"AUTH_USERNAME=admin,AUTH_PASSWORD=secure-password\"\n</code></pre> <p>API authentication is handled via individual API keys per server.</p>"},{"location":"web/deployment/cloud-run/#cost-optimization","title":"Cost Optimization","text":"<p>Cloud Run bills per request and compute time:</p> <ul> <li>Set minimum instances to 0</li> <li>Use appropriate memory allocation (128MB usually sufficient)</li> <li>Consider using Cloud CDN for static assets</li> </ul> <p>Typical cost: ~$0.35/month for light usage</p>"},{"location":"web/deployment/cloud-run/#updating","title":"Updating","text":"<p>To update the deployed container:</p> <pre><code># Rebuild and deploy\ngcloud builds submit --tag gcr.io/$PROJECT_ID/dashpad-web\ngcloud run deploy dashpad-web --image gcr.io/$PROJECT_ID/dashpad-web\n</code></pre>"},{"location":"web/deployment/cloud-run/#next-steps","title":"Next Steps","text":"<ul> <li>Ensure your API containers are accessible</li> <li>Configure authentication on both API and Web</li> <li>Set up monitoring for the Cloud Run service</li> </ul>"},{"location":"devlog/archive/2025/","title":"2025","text":"2025-07-132025-07-13"},{"location":"devlog/category/devlog/","title":"devlog","text":"2025-07-132025-07-13"}]}