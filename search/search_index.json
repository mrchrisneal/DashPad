{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DashPad","text":"<p>A modular system monitoring solution designed to repurpose old tablets as dedicated system metrics displays.</p> <p></p>"},{"location":"#important-notice","title":"\u26a0\ufe0f IMPORTANT NOTICE \u26a0\ufe0f","text":"<p>DashPad is alpha software in development (pre-release), created and maintained by a single hobbyist developer. </p> <p>This documentation is a work-in-progress and may change significantly.</p>"},{"location":"#what-is-dashpad","title":"What is DashPad?","text":"<p>DashPad transforms old, unused tablets (namely iPads) into real-time system monitoring displays for your servers. Built with a microservices architecture, it provides comprehensive infrastructure monitoring with minimal resource usage.</p> <p>DashPad traces its origins to 2024 as a basic, single-container solution to monitor unRAID server metrics in near-real-time. The project saw major development in mid-2025 where it was used as part of an educational project. </p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Real-time Monitoring: Updates every 2-60 seconds (configurable)</li> <li>Tablet Optimized: Responsive interface designed for iPad and other tablets</li> <li>Multi-Server Support: Monitor multiple systems from one dashboard</li> <li>Modular Design: Enable only the metrics you need</li> <li>Lightweight: Minimal resource usage on both server and tablet</li> </ul>"},{"location":"#dashpad-is-for-you-if","title":"DashPad is for you if...","text":"<p>\u2705 You have old tablets gathering dust</p> <p>\u2705 You want lightweight system monitoring without a database</p> <p>\u2705 You prefer simple, visual monitoring displays</p> <p>\u2705 You run home servers or small infrastructure </p> <p>\u2705 You value resource efficiency</p> <p>\u2705 You want at-a-glance system health visibility</p>"},{"location":"#dashpad-is-not-for-you-if","title":"DashPad is NOT for you if...","text":"<p>\u274c You need historical data storage (at least, for more than one hour)</p> <p>\u274c You require complex alerting rules</p> <p>\u274c You want a full monitoring stack</p> <p>\u274c You need Windows support</p> <p>\u274c You require user management or multi-tenancy</p> <p>\u274c You need to monitor multiple dozens of servers</p> <p>\u274c You're uncomfortable leaving electronics on and plugged in constantly</p>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<p>DashPad consists of two primary microservices:</p> Component Description Deployment DashPad-API Backend data collection service Local server only DashPad-Web Frontend monitoring interface Local or cloud <p>Important: The API container must run directly on the server being monitored, as it requires access to system directories like <code>/proc</code>. Only the Web container can be deployed to the cloud.</p>"},{"location":"#available-metrics","title":"Available Metrics","text":"<ul> <li>System Metrics: CPU usage, RAM usage, system uptime</li> <li>Log Monitoring: Real-time system log viewing</li> <li>Scheduled Tasks: Cron job monitoring</li> <li>Alerts: Netdata integration for system alerts</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Architecture - Technical design overview</li> <li>API Configuration - Backend setup</li> <li>Web Configuration - Frontend setup</li> <li>API Reference - Endpoint documentation</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>Documentation: You're here! \ud83d\udc4b</li> <li>Source Code: GitHub Repository</li> </ul>"},{"location":"architecture/","title":"Architecture Overview","text":"<p>DashPad implements a clean microservices architecture with two distinct components designed for different deployment scenarios.</p> <p></p>"},{"location":"architecture/#system-design","title":"System Design","text":"<p>DashPad uses a two-container architecture:</p> <ul> <li>DashPad-API: Runs on the (Linux-based) server being monitored, collects system metrics</li> <li>DashPad-Web: Can run anywhere, displays the collected metrics</li> </ul> <p>The API container MUST run directly on the Linux server because it needs direct access to system files like <code>/proc</code>, <code>/sys</code>, and log files. The Web container connects to one or more API containers to display data.</p>"},{"location":"architecture/#dashpad-api-architecture","title":"DashPad-API Architecture","text":"<p>Technology Stack: FastAPI, Python 3.9+</p> <p>Key Responsibilities:</p> <ul> <li>System metrics collection from multiple sources</li> <li>Data caching for efficiency</li> <li>RESTful API endpoints</li> <li>Modular metric collection system</li> </ul> <p>Resource Usage: ~50MB RAM</p> <p>The API uses a modular architecture where each metric type (CPU, RAM, etc.) is a separate module with its own collection logic.</p>"},{"location":"architecture/#dashpad-web-architecture","title":"DashPad-Web Architecture","text":"<p>Technology Stack: Svelte 5, NGINX</p> <p>Key Responsibilities:</p> <ul> <li>Responsive tablet-optimized interface</li> <li>Real-time data visualization</li> <li>Local settings management via localStorage</li> <li>Multi-server dashboard coordination</li> </ul> <p>Resource Usage: ~20MB RAM</p> <p>The Web interface polls the API at regular intervals and displays the data using a unified module system.</p>"},{"location":"architecture/#data-flow","title":"Data Flow","text":"<ol> <li>Metric Collection: API reads system data from sources (direct file reading or Netdata API)</li> <li>Data Processing: Raw data is processed and status is evaluated against thresholds</li> <li>Caching: Processed data is cached to reduce system load</li> <li>API Response: Data is formatted and returned via RESTful endpoints</li> <li>Frontend Polling: Web interface requests data at configured intervals</li> <li>Display Update: UI updates with new data and visual status indicators</li> </ol>"},{"location":"architecture/#data-sources","title":"Data Sources","text":"<p>The API supports multiple data sources with automatic fallback:</p> <ul> <li>Direct: Reads directly from <code>/proc</code>, <code>/sys</code>, and log files</li> <li>Netdata: Queries the Netdata API if available</li> </ul>"},{"location":"architecture/#multi-server-architecture","title":"Multi-Server Architecture","text":"<p>DashPad supports monitoring multiple servers from a single Web interface.</p> <p>Each server runs its own API container, and one central Web container connects to all of them.</p>"},{"location":"architecture/#design-principles","title":"Design Principles","text":""},{"location":"architecture/#separation-of-concerns","title":"Separation of Concerns","text":"<p>Backend Controls:</p> <ul> <li>WHAT data is collected</li> <li>Collection intervals and sources</li> <li>Alert thresholds and business logic</li> <li>System configuration and access</li> </ul> <p>Frontend Controls:</p> <ul> <li>HOW data is displayed</li> <li>Dashboard layout and positioning</li> <li>UI preferences and behavior</li> <li>Which servers to monitor</li> </ul> <p>This separation ensures the API remains authoritative for data while the frontend handles presentation, making the system flexible and maintainable.</p>"},{"location":"docker/","title":"Docker Deployment","text":"<p>This guide covers deploying DashPad using Docker on your Linux server.</p>"},{"location":"docker/#important-notes","title":"Important Notes","text":"<p>\u26a0\ufe0f The API container MUST run on the server you want to monitor. It requires direct access to: - <code>/proc</code> filesystem - <code>/sys</code> filesystem - System log files - Host networking</p> <p>The Web container can run anywhere (local or cloud).</p>"},{"location":"docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker 20.10+</li> <li>Docker Compose 1.29+</li> <li>Linux server to monitor</li> <li>500MB free disk space</li> </ul>"},{"location":"docker/#quick-deployment","title":"Quick Deployment","text":""},{"location":"docker/#1-create-project-directory","title":"1. Create Project Directory","text":"<pre><code>mkdir -p /opt/dashpad &amp;&amp; cd /opt/dashpad\n</code></pre>"},{"location":"docker/#2-create-docker-composeyml","title":"2. Create docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  dashpad-api:\n    image: ghcr.io/mrchrisneal/dashpad-api:latest\n    container_name: dashpad-api\n    restart: unless-stopped\n    ports:\n      - \"5241:5241\"\n    volumes:\n      - ./settings.json:/app/settings.json:ro\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /var/log:/host/var/log:ro\n    environment:\n      - TZ=America/New_York\n\n  dashpad-web:\n    image: ghcr.io/mrchrisneal/dashpad-web:latest\n    container_name: dashpad-web\n    restart: unless-stopped\n    ports:\n      - \"5240:5240\"\n    environment:\n      - LISTEN_PORT=5240\n      - USE_HTTPS=true\n      - AUTH_USERNAME=admin\n      - AUTH_PASSWORD=password\n      - SERVER1_NAME=Local Server\n      - SERVER1_URL=https://dashpad-api:5241\n      - SERVER1_KEY=your-64-character-api-key-from-api-logs\n      - SERVER1_SSLFINGERPRINT=your-ssl-fingerprint-from-api-logs\n    depends_on:\n      - dashpad-api\n</code></pre>"},{"location":"docker/#3-create-settingsjson","title":"3. Create settings.json","text":"<pre><code>{\n  \"api\": {\n    \"host\": \"0.0.0.0\",\n    \"port\": 5241\n  },\n  \"metrics\": {\n    \"update_interval_seconds\": 4,\n    \"enabled_metrics\": [\n      \"cpu_usage\",\n      \"ram_usage\",\n      \"system_uptime\"\n    ]\n  }\n}\n</code></pre>"},{"location":"docker/#4-start-services","title":"4. Start Services","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"docker/#volume-mounts","title":"Volume Mounts","text":"<p>The API container needs read-only access to system directories:</p> <pre><code>volumes:\n  # Configuration\n  - ./settings.json:/app/settings.json:ro\n\n  # System metrics (required)\n  - /proc:/host/proc:ro\n  - /sys:/host/sys:ro\n\n  # Logs (optional)\n  - /var/log:/host/var/log:ro\n\n  # unRAID specific (optional)\n  - /var/local/emhttp:/host/var/local/emhttp:ro\n  - /etc/cron.d:/host/etc/cron.d:ro\n</code></pre>"},{"location":"docker/#multi-server-monitoring","title":"Multi-Server Monitoring","text":"<p>To monitor multiple servers, run an API container on each server:</p> <p>Server 1: <pre><code>docker run -d \\\n  --name dashpad-api-server1 \\\n  -p 5241:5241 \\\n  -v ./settings.json:/app/settings.json:ro \\\n  -v /proc:/host/proc:ro \\\n  -v /sys:/host/sys:ro \\\n  dashpad-api\n</code></pre></p> <p>Server 2: <pre><code>docker run -d \\\n  --name dashpad-api-server2 \\\n  -p 5556:5241 \\\n  -v ./settings.json:/app/settings.json:ro \\\n  -v /proc:/host/proc:ro \\\n  -v /sys:/host/sys:ro \\\n  dashpad-api\n</code></pre></p> <p>Central Web Container: <pre><code>docker run -d \\\n  --name dashpad-web \\\n  -p 5240:5240 \\\n  -e LISTEN_PORT=5240 \\\n  -e USE_HTTPS=true \\\n  -e AUTH_USERNAME=admin \\\n  -e AUTH_PASSWORD=password \\\n  -e SERVER1_NAME=\"Server 1\" \\\n  -e SERVER1_URL=\"https://server1:5241\" \\\n  -e SERVER1_KEY=\"api-key-from-server1-logs\" \\\n  -e SERVER1_SSLFINGERPRINT=\"ssl-fingerprint-from-server1-logs\" \\\n  -e SERVER2_NAME=\"Server 2\" \\\n  -e SERVER2_URL=\"https://server2:5241\" \\\n  -e SERVER2_KEY=\"api-key-from-server2-logs\" \\\n  -e SERVER2_SSLFINGERPRINT=\"ssl-fingerprint-from-server2-logs\" \\\n  dashpad-web\n</code></pre></p>"},{"location":"docker/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"docker/#unraid","title":"unRAID","text":"<p>Add via Docker template or use command line with appropriate paths.</p>"},{"location":"docker/#synology-nas","title":"Synology NAS","text":"<ol> <li>Install Docker from Package Center</li> <li>Create shared folder <code>/docker/dashpad</code></li> <li>Use Container Manager to deploy</li> </ol>"},{"location":"docker/#standard-linux","title":"Standard Linux","text":"<p>Works on any Linux distribution with Docker installed.</p>"},{"location":"docker/#security","title":"Security","text":""},{"location":"docker/#enable-api-authentication","title":"Enable API Authentication","text":"<p>API authentication is enabled by default. To get your API key and SSL fingerprint:</p> <ol> <li> <p>Check API container logs:    <pre><code>docker logs dashpad-api | grep -E \"API Key:|SSL Fingerprint:\"\n</code></pre></p> </li> <li> <p>Use these values in your Web container configuration:    <pre><code>environment:\n  - SERVER1_KEY=your-64-character-key-from-logs\n  - SERVER1_SSLFINGERPRINT=your-ssl-fingerprint-from-logs\n</code></pre></p> </li> </ol>"},{"location":"docker/#maintenance","title":"Maintenance","text":""},{"location":"docker/#view-logs","title":"View Logs","text":"<pre><code>docker-compose logs -f dashpad-api\ndocker-compose logs -f dashpad-web\n</code></pre>"},{"location":"docker/#update-containers","title":"Update Containers","text":"<pre><code>docker-compose pull\ndocker-compose up -d\n</code></pre>"},{"location":"docker/#check-status","title":"Check Status","text":"<pre><code>docker-compose ps\n</code></pre>"},{"location":"docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"docker/#container-wont-start","title":"Container Won't Start","text":"<p>Check logs: <pre><code>docker logs dashpad-api\n</code></pre></p> <p>Common issues: - Port already in use - Permission denied on volume mounts - Invalid settings.json</p>"},{"location":"docker/#no-data-showing","title":"No Data Showing","text":"<p>Verify: - API is accessible: <code>curl -k https://localhost:5241/health</code> - Correct volume mounts - Settings.json is valid JSON - API key and SSL fingerprint are correct in Web container</p>"},{"location":"docker/#next-steps","title":"Next Steps","text":"<ul> <li>API Configuration - Configure metrics</li> <li>Web Configuration - Configure interface</li> </ul>"},{"location":"api/","title":"DashPad-API Overview","text":"<p>DashPad-API is a FastAPI-based backend service that collects system metrics directly from the Linux server it runs on.</p>"},{"location":"api/#important-deployment-note","title":"Important Deployment Note","text":"<p>\u26a0\ufe0f The API container MUST run directly on the server being monitored. It cannot be deployed to cloud services like Google Cloud Run because it requires:</p> <ul> <li>Direct access to <code>/proc</code> and <code>/sys</code> filesystems</li> <li>Local file system access for logs</li> <li>Host networking to gather network information (planned feature)</li> </ul> <p>Only deploy the API container on the actual Linux server you want to monitor.</p>"},{"location":"api/#key-features","title":"Key Features","text":"<ul> <li>Multi-source data collection with automatic fallback</li> <li>Modular architecture for easy metric addition</li> <li>Real-time metrics with configurable update intervals</li> <li>Built-in caching for efficient resource usage</li> <li>RESTful API with automatic documentation</li> <li>Optional authentication with API keys</li> </ul>"},{"location":"api/#interactive-api-documentation","title":"Interactive API Documentation","text":"<p>FastAPI automatically generates interactive API documentation. Access it at:</p> <pre><code>https://your-server:5241/docs\n</code></pre> <p>This provides a web interface to explore and test all endpoints.</p>"},{"location":"api/#architecture","title":"Architecture","text":""},{"location":"api/#module-system","title":"Module System","text":"<p>Each metric type is implemented as a module:</p> <pre><code>modules/\n\u251c\u2500\u2500 cpu_usage/\n\u251c\u2500\u2500 ram_usage/\n\u251c\u2500\u2500 system_uptime/\n\u251c\u2500\u2500 cron_tasks/\n\u251c\u2500\u2500 logs/\n\u2514\u2500\u2500 alerts/\n</code></pre>"},{"location":"api/#data-sources","title":"Data Sources","text":"<p>The API tries to query one or more sources in the order they are specified within <code>settings.json</code>, including:</p> <ul> <li>Direct - Read from system files</li> <li>Netdata - Query Netdata API if available</li> </ul>"},{"location":"api/#quick-start","title":"Quick Start","text":""},{"location":"api/#running-locally","title":"Running Locally","text":"<pre><code># With Docker\ndocker run -d \\\n  --name dashpad-api \\\n  -p 5241:5241 \\\n  -v $(pwd)/settings.json:/app/settings.json:ro \\\n  -v /proc:/host/proc:ro \\\n  -v /sys:/host/sys:ro \\\n  -v /var/log:/host/var/log:ro \\\n  ghcr.io/mrchrisneal/dashpad-api:latest\n</code></pre>"},{"location":"api/#basic-usage","title":"Basic Usage","text":"<p>By default, a valid API key MUST be passed to the API in either an HTTP header or as a URL parameter (?apikey=your-api-key). Both examples are included below:</p> <pre><code># Check health\ncurl -k https://localhost:5241/health?apikey=your-api-key\n\n# Get all metrics (with API key)\ncurl -k -H \"X-API-Key: your-api-key\" https://localhost:5241/metrics\n\n# View interactive docs\nopen https://localhost:5241/docs?apikey=your-api-key\n</code></pre> <p>Note: The <code>-k</code> flag is used to accept self-signed certificates.</p>"},{"location":"api/#configuration","title":"Configuration","text":"<p>The API is configured via <code>settings.json</code>. Key sections:</p> <ul> <li>Metrics: Which modules to enable</li> <li>Thresholds: Warning and critical limits</li> <li>Update intervals: How often to collect data</li> </ul> <p>See Configuration Reference for details.</p>"},{"location":"api/#security","title":"Security","text":"<ul> <li>Optional API key authentication</li> <li>No sensitive data storage</li> <li>Read-only system access</li> <li>Data redaction capabilities</li> </ul>"},{"location":"api/#performance","title":"Performance","text":"<ul> <li>Memory: ~50MB typical usage</li> <li>CPU: Minimal impact</li> <li>Network: RESTful JSON responses</li> </ul>"},{"location":"api/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration Reference - Detailed settings</li> <li>API Endpoints - Endpoint documentation</li> <li>Available Modules - Module descriptions</li> </ul>"},{"location":"api/configuration/","title":"Configuration Reference","text":"<p>This document covers configuring the DashPad API through the <code>settings.json</code> file.</p>"},{"location":"api/configuration/#configuration-file","title":"Configuration File","text":"<p>The <code>settings.json</code> file should be placed in the API container root: - Docker: Mount as volume at <code>/app/settings.json</code> - Local Development: Place in project root</p>"},{"location":"api/configuration/#core-configuration-sections","title":"Core Configuration Sections","text":""},{"location":"api/configuration/#api-server-settings","title":"API Server Settings","text":"<pre><code>{\n  \"api\": {\n    \"host\": \"0.0.0.0\",\n    \"port\": 5241,\n    \"allow_origins\": [\"*\"],\n    \"auth\": {\n      \"enabled\": true,\n      \"api_key\": \"your-64-character-hex-key\"\n    }\n  }\n}\n</code></pre> <p>Note: API authentication is enabled by default. The API key is auto-generated on first startup and displayed in the container logs.</p>"},{"location":"api/configuration/#metrics-configuration","title":"Metrics Configuration","text":"<p>Control which metrics are collected:</p> <pre><code>{\n  \"metrics\": {\n    \"update_interval_seconds\": 4,\n    \"enabled_metrics\": [\"cpu_usage\", \"ram_usage\", \"system_uptime\"],\n    \"sources\": {\n      \"cpu_usage\": [\"direct\", \"netdata\"],\n      \"ram_usage\": [\"direct\", \"netdata\"],\n      \"system_uptime\": [\"direct\"]\n    }\n  }\n}\n</code></pre>"},{"location":"api/configuration/#threshold-configuration","title":"Threshold Configuration","text":"<p>Define warning and critical levels:</p> <pre><code>{\n  \"metrics_thresholds\": {\n    \"cpu_usage\": {\n      \"warning\": 80,\n      \"critical\": 90,\n      \"direction\": \"above\"\n    },\n    \"ram_usage\": {\n      \"warning\": 80,\n      \"critical\": 90,\n      \"direction\": \"above\"\n    }\n  }\n}\n</code></pre> <p>Direction can be: - <code>\"above\"</code>: Alert when value exceeds threshold - <code>\"below\"</code>: Alert when value falls below threshold</p>"},{"location":"api/configuration/#log-configuration","title":"Log Configuration","text":"<p>Configure log file monitoring:</p> <pre><code>{\n  \"logs\": {\n    \"syslog\": {\n      \"path\": \"/var/log/syslog\",\n      \"lines\": 100,\n      \"redact_datatype\": [\"ip\", \"email\"]\n    }\n  }\n}\n</code></pre>"},{"location":"api/configuration/#cron-configuration","title":"Cron Configuration","text":"<p>Monitor scheduled tasks:</p> <pre><code>{\n  \"cron\": {\n    \"locations_types_map\": {\n      \"/etc/cron.d/\": \"auto\"\n    },\n    \"rename_map\": {\n      \"backup\": \"Daily Backup Task\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/configuration/#netdata-integration","title":"Netdata Integration","text":"<p>If using Netdata as a data source:</p> <pre><code>{\n  \"netdata\": {\n    \"url\": \"http://localhost:19999\"\n  }\n}\n</code></pre>"},{"location":"api/configuration/#complete-example","title":"Complete Example","text":"<p>Here's a minimal working configuration:</p> <pre><code>{\n  \"api\": {\n    \"host\": \"0.0.0.0\",\n    \"port\": 5241\n  },\n  \"metrics\": {\n    \"update_interval_seconds\": 4,\n    \"enabled_metrics\": [\n      \"cpu_usage\",\n      \"ram_usage\",\n      \"system_uptime\"\n    ]\n  },\n  \"metrics_thresholds\": {\n    \"cpu_usage\": {\n      \"warning\": 80,\n      \"critical\": 90,\n      \"direction\": \"above\"\n    },\n    \"ram_usage\": {\n      \"warning\": 80,\n      \"critical\": 90,\n      \"direction\": \"above\"\n    }\n  },\n  \"logs\": {\n    \"syslog\": {\n      \"path\": \"/var/log/syslog\",\n      \"lines\": 100\n    }\n  }\n}\n</code></pre>"},{"location":"api/configuration/#environment-variables","title":"Environment Variables","text":"<p>Some settings can be overridden:</p> Variable Overrides Example <code>API_HOST</code> <code>api.host</code> <code>0.0.0.0</code> <code>API_PORT</code> <code>api.port</code> <code>5241</code> <code>TZ</code> System timezone <code>America/New_York</code>"},{"location":"api/configuration/#path-types","title":"Path Types","text":"<p>When configuring file paths, use the appropriate type:</p> <ul> <li><code>\"direct\"</code>: Use path exactly as specified</li> <li><code>\"bindmount\"</code>: Prepend <code>/host/</code> to the path</li> <li><code>\"auto\"</code>: Automatically detect container environment</li> </ul>"},{"location":"api/configuration/#data-redaction","title":"Data Redaction","text":"<p>Available redaction types for logs: - <code>ip</code>: Redact IP addresses - <code>mac</code>: Redact MAC addresses - <code>email</code>: Redact email addresses - <code>url</code>: Redact URLs</p>"},{"location":"api/configuration/#validation","title":"Validation","text":"<p>The API validates configuration on startup. Common errors: - Invalid JSON syntax - Unknown configuration keys - Invalid threshold values</p> <p>Check logs if the API fails to start: <pre><code>docker logs dashpad-api\n</code></pre></p>"},{"location":"api/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>API Endpoints - Endpoint reference</li> <li>Available Modules - Module configurations</li> </ul>"},{"location":"api/endpoints/","title":"API Endpoints","text":"<p>Complete reference for all DashPad API endpoints.</p>"},{"location":"api/endpoints/#interactive-documentation","title":"Interactive Documentation","text":"<p>FastAPI provides auto-generated interactive API documentation at:</p> <pre><code>https://your-server:5241/docs\n</code></pre> <p>This allows you to explore and test all endpoints directly in your browser.</p>"},{"location":"api/endpoints/#authentication","title":"Authentication","text":"<p>If authentication is enabled, include the API key in the request header:</p> <pre><code>X-API-Key: your-64-character-hex-key\n</code></pre>"},{"location":"api/endpoints/#base-url","title":"Base URL","text":"<pre><code>https://your-server:5241\n</code></pre>"},{"location":"api/endpoints/#health-status-endpoints","title":"Health &amp; Status Endpoints","text":""},{"location":"api/endpoints/#get-health","title":"GET /health","text":"<p>Basic health check endpoint.</p> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"server_identity\": \"your-server\",\n  \"timezone\": \"America/New_York\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#get-status","title":"GET /status","text":"<p>Detailed server status information.</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"timezone\": \"America/New_York\",\n  \"server_info\": {\n    \"hostname\": \"your-server\",\n    \"platform\": \"linux\",\n    \"python_version\": \"3.9.16\"\n  },\n  \"api_config\": {\n    \"authentication_enabled\": false,\n    \"cors_origins\": [\"*\"]\n  },\n  \"scheduler_config\": {\n    \"metrics_interval\": 4,\n    \"logs_interval\": 30\n  },\n  \"integrations\": {\n    \"netdata\": {\n      \"enabled\": true,\n      \"url\": \"http://localhost:19999\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/endpoints/#metrics-endpoints","title":"Metrics Endpoints","text":""},{"location":"api/endpoints/#get-metrics","title":"GET /metrics","text":"<p>Returns all enabled metrics in a single response.</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"metrics\": {\n    \"cpu\": {\n      \"source\": \"direct\",\n      \"status\": \"good\",\n      \"data\": {\n        \"usage_percent\": 45.2\n      }\n    },\n    \"ram\": {\n      \"source\": \"direct\",\n      \"status\": \"warning\",\n      \"data\": {\n        \"usage_percent\": 82.5,\n        \"used_mb\": 13200,\n        \"total_mb\": 16000\n      }\n    },\n    \"uptime\": {\n      \"source\": \"direct\",\n      \"status\": \"good\",\n      \"data\": {\n        \"uptime_seconds\": 86400,\n        \"human_readable\": \"1 day, 0 hrs, 0 mins, 0 secs\"\n      }\n    }\n  },\n  \"logs\": {\n    \"syslog\": {\n      \"content\": {...},\n      \"total_lines\": 5000,\n      \"returned_lines\": 100\n    }\n  },\n  \"cron\": {\n    \"cron_tasks\": [...],\n    \"status\": \"normal\"\n  },\n  \"alerts\": {\n    \"alerts\": [...],\n    \"status\": \"normal\"\n  },\n  \"next_update_sec\": 4\n}\n</code></pre></p>"},{"location":"api/endpoints/#get-metricsmetric_name","title":"GET /metrics/{metric_name}","text":"<p>Get a specific metric by name.</p> <p>Parameters: - <code>metric_name</code> - Name of the metric (e.g., cpu_usage, ram_usage, system_uptime)</p> <p>Response: <pre><code>{\n  \"metric\": \"cpu_usage\",\n  \"timestamp\": \"2025-06-18T19:17:00.000-07:00\",\n  \"data\": {\n    \"usage_percent\": 45.2\n  },\n  \"source\": \"direct\",\n  \"status\": \"good\",\n  \"update_interval_sec\": 4\n}\n</code></pre></p>"},{"location":"api/endpoints/#get-querysourcemetric","title":"GET /query/{source}/{metric}","text":"<p>Query a specific metric from a specific source (for testing).</p> <p>Parameters: - <code>source</code> - Data source: <code>direct</code> or <code>netdata</code> - <code>metric</code> - Metric name</p> <p>Response: <pre><code>{\n  \"metric\": \"cpu_usage\",\n  \"timestamp\": \"2025-06-18T19:17:00.000-07:00\",\n  \"data\": {\n    \"usage_percent\": 45.2\n  },\n  \"source\": \"direct\",\n  \"server_identity\": \"your-server\",\n  \"status\": \"good\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#log-endpoints","title":"Log Endpoints","text":""},{"location":"api/endpoints/#get-logs","title":"GET /logs","text":"<p>Returns all configured logs with their contents.</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"logs\": {\n    \"syslog\": {\n      \"content\": {\n        \"1\": \"Jun 18 19:15:00 server systemd[1]: Started Daily apt download.\",\n        \"2\": \"Jun 18 19:16:00 server kernel: [12345.678] CPU0: Temperature above threshold\"\n      },\n      \"total_lines\": 5000,\n      \"returned_lines\": 100,\n      \"supports_incremental\": true\n    }\n  },\n  \"next_update_sec\": 30\n}\n</code></pre></p>"},{"location":"api/endpoints/#get-logslog_name","title":"GET /logs/{log_name}","text":"<p>Get a specific log by name.</p> <p>Parameters: - <code>log_name</code> - Name of the log as configured in settings.json - <code>since_line</code> (optional) - Line number to start from (for incremental updates)</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"content\": {\n    \"1001\": \"Jun 18 19:17:00 server systemd[1]: Log entry...\",\n    \"1002\": \"Jun 18 19:17:01 server kernel: Another entry...\"\n  },\n  \"total_lines\": 5000,\n  \"returned_lines\": 2,\n  \"supports_incremental\": true,\n  \"next_update_sec\": 30\n}\n</code></pre></p>"},{"location":"api/endpoints/#cron-endpoints","title":"Cron Endpoints","text":""},{"location":"api/endpoints/#get-cron_tasks","title":"GET /cron_tasks","text":"<p>Get upcoming scheduled cron tasks.</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"cron_tasks\": [\n    {\n      \"name\": \"Run file mover\",\n      \"schedule\": \"0 3 * * *\",\n      \"next_run\": \"2025-06-19T03:00:00\",\n      \"relative_time\": \"7 hours 43 minutes\",\n      \"relative_time_short\": \"7h43m\"\n    }\n  ],\n  \"cron_stats\": {\n    \"total_tasks\": 5,\n    \"next_task_minutes\": 463\n  },\n  \"source\": \"direct\",\n  \"status\": \"normal\",\n  \"next_update_sec\": 60\n}\n</code></pre></p>"},{"location":"api/endpoints/#alert-endpoints","title":"Alert Endpoints","text":""},{"location":"api/endpoints/#get-alertsnetdata","title":"GET /alerts/netdata","text":"<p>Get active alerts from Netdata.</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"alerts\": [\n    {\n      \"id\": \"disk_space_warning\",\n      \"name\": \"Disk Space Warning\",\n      \"status\": \"WARNING\",\n      \"value\": 85.2,\n      \"units\": \"%\",\n      \"info\": \"Disk usage above 80%\",\n      \"last_status_change\": 1718764620\n    }\n  ],\n  \"alerts_stats\": {\n    \"total\": 2,\n    \"by_status\": {\n      \"WARNING\": 1,\n      \"CRITICAL\": 1\n    }\n  },\n  \"source\": \"netdata\",\n  \"status\": \"warning\",\n  \"hostname\": \"your-server\",\n  \"next_update_sec\": 30\n}\n</code></pre></p>"},{"location":"api/endpoints/#scheduler-endpoints","title":"Scheduler Endpoints","text":""},{"location":"api/endpoints/#get-schedulerstatus","title":"GET /scheduler/status","text":"<p>Get scheduler status and update intervals.</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"running\": true,\n  \"update_intervals\": {\n    \"metrics\": 4,\n    \"logs\": 30,\n    \"cron\": 60,\n    \"alerts\": 30\n  },\n  \"next_updates\": {\n    \"metrics\": 2.5,\n    \"logs\": 15.3,\n    \"cron\": 45.1,\n    \"alerts\": 12.7\n  },\n  \"next_update_sec\": 2.5\n}\n</code></pre></p>"},{"location":"api/endpoints/#post-schedulercontrol","title":"POST /scheduler/control","text":"<p>Control the scheduler (start, stop, restart).</p> <p>Parameters: - <code>action</code> - One of: <code>start</code>, <code>stop</code>, <code>restart</code></p> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"message\": \"Scheduler restarted\",\n  \"running\": true,\n  \"server_identity\": \"your-server\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#configuration-endpoints","title":"Configuration Endpoints","text":""},{"location":"api/endpoints/#get-settingsmodules","title":"GET /settings/modules","text":"<p>Get available modules and their configurations.</p> <p>Response: <pre><code>{\n  \"server_identity\": \"your-server\",\n  \"server_time\": \"2025-06-18T19:17:00.000-07:00\",\n  \"modules\": {\n    \"metrics\": {\n      \"cpu_usage\": {\n        \"enabled\": true,\n        \"display_name\": \"CPU Usage\",\n        \"description\": \"Central Processing Unit utilization\",\n        \"sources\": [\"direct\", \"netdata\"],\n        \"thresholds\": {\n          \"warning\": 80,\n          \"critical\": 90\n        }\n      }\n    },\n    \"logs\": {\n      \"syslog\": {\n        \"enabled\": true,\n        \"display_name\": \"System Log\",\n        \"line_limit\": 100,\n        \"supports_redaction\": true\n      }\n    },\n    \"cron\": {\n      \"enabled\": true,\n      \"display_name\": \"Scheduled Tasks\"\n    },\n    \"alerts\": {\n      \"enabled\": true,\n      \"display_name\": \"Active Alerts\",\n      \"sources\": [\"netdata\"]\n    }\n  },\n  \"next_update_sec\": null\n}\n</code></pre></p>"},{"location":"api/endpoints/#error-responses","title":"Error Responses","text":""},{"location":"api/endpoints/#400-bad-request","title":"400 Bad Request","text":"<p>Invalid parameters or request format.</p> <pre><code>{\n  \"detail\": \"Invalid action: invalid_action. Must be one of: start, stop, restart\"\n}\n</code></pre>"},{"location":"api/endpoints/#401-unauthorized","title":"401 Unauthorized","text":"<p>Missing or invalid API key (when authentication is enabled).</p> <pre><code>{\n  \"detail\": \"Invalid or missing API key\"\n}\n</code></pre>"},{"location":"api/endpoints/#404-not-found","title":"404 Not Found","text":"<p>Resource not found.</p> <pre><code>{\n  \"detail\": \"Metric 'non_existent_metric' not found\"\n}\n</code></pre>"},{"location":"api/endpoints/#500-internal-server-error","title":"500 Internal Server Error","text":"<p>Server error during processing.</p> <pre><code>{\n  \"detail\": \"Internal server error\",\n  \"type\": \"server_error\"\n}\n</code></pre>"},{"location":"api/endpoints/#response-headers","title":"Response Headers","text":"<p>All responses include:</p> <ul> <li><code>Content-Type: application/json</code></li> <li><code>Access-Control-Allow-Origin: *</code> (or configured origins)</li> </ul>"},{"location":"api/endpoints/#rate-limiting","title":"Rate Limiting","text":"<p>No built-in rate limiting. Implement at proxy level if needed.</p>"},{"location":"api/endpoints/#example-usage","title":"Example Usage","text":""},{"location":"api/endpoints/#using-curl","title":"Using cURL","text":"<pre><code># Get all metrics\ncurl -k https://localhost:5241/metrics\n\n# Get specific metric\ncurl -k https://localhost:5241/metrics/cpu_usage\n\n# With authentication\ncurl -k -H \"X-API-Key: your-api-key\" https://localhost:5241/metrics\n\n# Control scheduler\ncurl -k -X POST \"https://localhost:5241/scheduler/control?action=restart\"\n</code></pre> <p>Note: The <code>-k</code> flag is used to accept self-signed certificates. In production with proper certificates, this flag can be omitted.</p>"},{"location":"api/endpoints/#using-python","title":"Using Python","text":"<pre><code>import requests\n\n# Base configuration\nbase_url = \"https://localhost:5241\"\nheaders = {\"X-API-Key\": \"your-api-key\"}\n\n# Disable SSL verification for self-signed certificates\nrequests.packages.urllib3.disable_warnings()\n\n# Get all metrics\nresponse = requests.get(f\"{base_url}/metrics\", headers=headers, verify=False)\ndata = response.json()\n\n# Get specific log with incremental update\nresponse = requests.get(\n    f\"{base_url}/logs/syslog\",\n    params={\"since_line\": 1000},\n    headers=headers,\n    verify=False\n)\nlog_data = response.json()\n</code></pre>"},{"location":"api/endpoints/#using-javascript","title":"Using JavaScript","text":"<pre><code>// Get all metrics\nconst response = await fetch('https://localhost:5241/metrics', {\n  headers: {\n    'X-API-Key': 'your-api-key'\n  }\n});\nconst data = await response.json();\n\n// Poll for updates\nsetInterval(async () =&gt; {\n  const metrics = await fetch('https://localhost:5241/metrics', {\n    headers: { 'X-API-Key': 'your-api-key' }\n  }).then(r =&gt; r.json());\n  updateDashboard(metrics);\n}, 4000); // Use next_update_sec from response\n</code></pre>"},{"location":"api/endpoints/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration Reference - Configure the API</li> <li>Available Modules - Module descriptions</li> </ul>"},{"location":"api/modules/","title":"Available Modules","text":"<p>DashPad provides several monitoring modules that can be enabled and configured independently.</p>"},{"location":"api/modules/#available-module-types","title":"Available Module Types","text":"<ul> <li>cpu_usage - CPU utilization monitoring</li> <li>ram_usage - Memory usage tracking</li> <li>system_uptime - System runtime display</li> <li>cron_tasks - Scheduled task monitoring</li> <li>logs - System log viewing</li> <li>alerts - Netdata alert integration</li> </ul>"},{"location":"api/modules/#system-metrics","title":"System Metrics","text":""},{"location":"api/modules/#cpu-usage","title":"CPU Usage","text":"<p>Monitor processor utilization.</p> <p>Module Name: <code>cpu_usage</code></p> <p>Data Sources: - <code>direct</code> - Reads from <code>/proc/stat</code> - <code>netdata</code> - Queries Netdata API</p> <p>Response Data: <pre><code>{\n  \"usage_percent\": 45.2\n}\n</code></pre></p> <p>Configuration: <pre><code>{\n  \"metrics\": {\n    \"cpu_usage\": {\n      \"enabled\": true,\n      \"sources\": [\"direct\", \"netdata\"],\n      \"thresholds\": {\n        \"warning\": 80,\n        \"critical\": 90,\n        \"direction\": \"above\"\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/modules/#ram-usage","title":"RAM Usage","text":"<p>Monitor memory consumption and availability.</p> <p>Module Name: <code>ram_usage</code></p> <p>Data Sources: - <code>direct</code> - Reads from <code>/proc/meminfo</code> - <code>netdata</code> - Queries Netdata API</p> <p>Response Data: <pre><code>{\n  \"usage_percent\": 65.4,\n  \"used_mb\": 10464,\n  \"total_mb\": 16000,\n  \"available_mb\": 5536\n}\n</code></pre></p>"},{"location":"api/modules/#system-uptime","title":"System Uptime","text":"<p>Track how long the system has been running.</p> <p>Module Name: <code>system_uptime</code></p> <p>Data Sources: - <code>direct</code> - Reads from <code>/proc/uptime</code> - <code>netdata</code> - Queries Netdata API</p> <p>Response Data: <pre><code>{\n  \"uptime_seconds\": 86400,\n  \"human_readable\": \"1 day, 0 hrs, 0 mins, 0 secs\"\n}\n</code></pre></p>"},{"location":"api/modules/#log-monitoring","title":"Log Monitoring","text":""},{"location":"api/modules/#system-logs","title":"System Logs","text":"<p>Monitor and display system log files with real-time updates.</p> <p>Module Type: <code>logs</code></p> <p>Features: - Configurable line limits - Incremental updates - Data redaction for security</p> <p>Configuration: <pre><code>{\n  \"logs\": {\n    \"syslog\": {\n      \"path\": \"/var/log/syslog\",\n      \"lines\": 100,\n      \"redact_datatype\": [\"ip\", \"email\"]\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/modules/#scheduled-tasks","title":"Scheduled Tasks","text":""},{"location":"api/modules/#cron-monitoring","title":"Cron Monitoring","text":"<p>Display upcoming cron jobs and scheduled tasks.</p> <p>Module Name: <code>cron_tasks</code></p> <p>Features: - Reads system cron directories - Shows next execution time - Task renaming for clarity</p> <p>Response Data: <pre><code>{\n  \"cron_tasks\": [\n    {\n      \"name\": \"Daily Backup\",\n      \"schedule\": \"0 3 * * *\",\n      \"next_run\": \"2025-06-19T03:00:00\",\n      \"relative_time_short\": \"7h43m\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/modules/#alert-integration","title":"Alert Integration","text":""},{"location":"api/modules/#netdata-alerts","title":"Netdata Alerts","text":"<p>Display active system alerts from Netdata monitoring.</p> <p>Module Name: <code>alerts</code></p> <p>Response Data: <pre><code>{\n  \"alerts\": [\n    {\n      \"name\": \"Disk Space Warning\",\n      \"status\": \"WARNING\",\n      \"value\": 85.2,\n      \"units\": \"%\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/modules/#module-status-levels","title":"Module Status Levels","text":"<p>All modules support status levels for visual indicators:</p> Status Description Visual Indicator <code>normal</code> Within thresholds Green <code>warning</code> Approaching limits Yellow <code>critical</code> Exceeded thresholds Red <code>unknown</code> Unable to determine Gray"},{"location":"api/modules/#creating-custom-modules","title":"Creating Custom Modules","text":"<p>Each module follows a standard structure with a coordinator that tries multiple data sources. See the existing modules for examples.</p> <p>Note: Debug logging is currently not functional in the API container.</p>"},{"location":"api/modules/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/modules/#update-intervals","title":"Update Intervals","text":"<p>Different modules have different recommended intervals:</p> Module Type Recommended Interval CPU Usage 2-5 seconds RAM Usage 4-10 seconds System Uptime 30-60 seconds Logs 10-30 seconds Cron Tasks 60 seconds Alerts 15-30 seconds"},{"location":"api/modules/#troubleshooting-modules","title":"Troubleshooting Modules","text":""},{"location":"api/modules/#module-not-appearing","title":"Module Not Appearing","text":"<ol> <li>Check if module is enabled in settings.json</li> <li>Verify source configuration</li> <li>Check API logs for errors</li> <li>Test with <code>/query/{source}/{metric}</code> endpoint</li> </ol>"},{"location":"api/modules/#data-collection-failures","title":"Data Collection Failures","text":"<p>Common issues:</p> Issue Solution Permission denied Ensure proper volume mounts File not found Check path configuration Netdata connection failed Verify Netdata URL"},{"location":"api/modules/#next-steps","title":"Next Steps","text":"<ul> <li>API Configuration - Configure modules</li> <li>Web Interface Guide - Display modules</li> </ul>"},{"location":"devlog/","title":"Devlog","text":""},{"location":"devlog/2025/06/29/devlog-1-hello-world/","title":"Devlog #1: Hello, World!","text":"<p>This section of the documentation may be used in the future to provide detailed changelog information or devlog information. </p> <p>All documentation is still a work-in-progress as of writing.</p> <p>Thanks for stopping by!</p>","tags":["api","web","changelog"]},{"location":"web/","title":"DashPad-Web Overview","text":"<p>The DashPad-Web interface is a Svelte 5-based frontend designed primarily for tablet displays, and provides a performant, responsive dashboard for real-time system monitoring. It securely connects to one or more DashPad-API instances to display live metrics, logs, and alerts, turning any spare tablet into a dedicated, always-on monitoring screen. The entire experience is crafted to be lightweight and performant, ensuring it operates effectively even on older hardware.</p>"},{"location":"web/#important-concepts","title":"Important Concepts","text":"<ul> <li>Purpose: DashPad-Web turns any tablet into a dedicated, real-time monitoring screen for your servers. </li> <li>Security: DashPad-Web uses a secure proxy for requests to the API container; API keys and credentials are never exposed to the browser. </li> <li>Multi-Server: DashPad-Web can monitor multiple <code>DashPad-API</code> instances from a single dashboard. </li> <li>Stateless &amp; (Near) Real-Time: The web interface has no database, and is limited to the last hour of gathered data. Historical graphs are built in your browser, so the device must remain on with the page in focus for data collection.</li> </ul> <p>In a Hurry? Check out the Quick Start Guide for the fastest way to get up and running.</p>"},{"location":"web/#key-features","title":"Key Features","text":"<ul> <li> <p>Tablet-Optimized Layout: The interface uses a responsive, adjustable grid from 1 to 4 columns to fit any screen size. This ensures optimal use of display real estate on everything from a phone to a large monitor. Module and column widths automatically adapt with orientation, allowing for fluid changes between portrait and landscape modes on portable devices. </p> </li> <li> <p>Multi-Server Monitoring: View metrics and logs from multiple DashPad-API instances in a single, unified dashboard. The <code>startup.sh</code> script inside the Web container reads environment variables that allow you to configure as many servers as you need (up to 50 by default; only 2 servers have been thoroughly tested). This eliminates   the need to switch between different tabs or tools to monitor your infrastructure.</p> </li> <li> <p>Real-Time Updates: The interface uses a clever polling mechanism that adjusts its update frequency based on hints from the API (<code>next_update_sec</code>). This ensures that frequently changing data like CPU metrics are updated quickly, while less volatile data like upcoming cron jobs are polled less often, resulting in a responsive UI that is also highly efficient. </p> </li> <li> <p>Historical Sparklines: Metric modules feature background sparklines that show performance trends over the last 10 minutes (by default; additional toggles for 5 and 15 minute durations are available). This data is collected and stored directly in your browser's memory (<code>historical.js</code>) and is capped at 50MB to ensure performance. </p> <ul> <li>Important: As all data is stored client-side, the dashboard must remain open and active in your browser to collect data for the sparklines and charts.</li> </ul> </li> <li> <p>Drag-and-Drop Customization: In \"Edit Mode,\" you can easily rearrange modules by dragging and dropping them to create a layout that suits your needs. This functionality is powered by the <code>svelte-dnd-action</code> library, and your custom layout is automatically saved to your browser's <code>localStorage</code>, making it persistent across sessions.</p> </li> <li> <p>Module-Specific Settings: Each module has its own set of configurable options, accessible via a cog icon in the module header. For example, you can toggle autoscroll for logs, customize the color thresholds for CPU and RAM warnings, define keyword highlighting rules for log viewers, or set the number of upcoming cron jobs to display. All display settings can be exported to your clipboard and imported later on a different device.</p> </li> </ul>"},{"location":"web/#technology-stack","title":"Technology Stack","text":"<ul> <li> <p>Framework: Built with Svelte 5 for a highly reactive and performant user experience. As the Svelte framework leverages a compiler, it generates highly optimized, minimal vanilla JavaScript, resulting in a small application bundle and fast load times.</p> </li> <li> <p>Web Server: Served by NGINX, which also acts as a secure reverse proxy to the backend API servers. This is a key part of the security model, as NGINX handles injecting authentication headers, ensuring API keys are never exposed to the frontend.</p> </li> <li> <p>State Management: Utilizes Svelte stores with <code>localStorage</code> persistence for UI state, layout, and module configurations. This keeps the application state consistent and preserves user customizations.</p> </li> <li> <p>Charting: Native SVG charts are used as a lightweight visualization solution. This avoids heavy, third-party charting libraries, contributing to the small footprint of the application.</p> </li> </ul>"},{"location":"web/#dashboard-layout-modules","title":"Dashboard Layout &amp; Modules","text":"<p>The dashboard is the core of the web interface. Modules are automatically organized into columns, and the number of columns can be changed with just one tap (or click). The layout is fully persistent across sessions, stored directly in your browser.</p> <p>Available Module Types:</p> <ul> <li> <p>System Metrics: Modules for CPU and RAM usage, featuring charts for real-time values and historical charts when expanded, giving you an at-a-glance view of system health. Chart durations can be toggled between 5 minutes, 15 minutes, 30 minutes (default), and 60 minutes in the Settings pane; they can be set globally and overridden on a per-module basis.</p> </li> <li> <p>Information Display: A simple module for displaying information like system uptime in a human-readable format.</p> </li> <li> <p>Log Viewer: A dedicated module for viewing system and application logs in real-time, with support for custom, hexadecimal color codes and keyword highlighting to make finding important events easier.</p> </li> <li> <p>Task Monitoring: A list-based module that displays upcoming scheduled <code>cron</code> tasks and their relative execution times, helping you anticipate system activity.</p> </li> <li> <p>Alerts: An Alerts module that shows active system warnings and critical alerts from a connected Netdata instance, providing immediate visibility into potential issues. This module requires an installed and functional Netdata instance.</p> </li> </ul>"},{"location":"web/#status-indicators","title":"Status Indicators","text":"<p>At-a-glance status information is conveyed through a simple color-coded system, which is shown primarily as a circular indicator icon within each module (where applicable).</p> <p>\ud83d\udfe2 Green: Normal operation.</p> <p>\ud83d\udfe1 Yellow: Warning state, indicating a potential issue (e.g., high CPU usage).</p> <p>\ud83d\udd34 Red: Critical state, indicating an active problem that requires attention.</p> <p>Modules without threshold logic (such as the <code>uptime</code> module) do not display threshold indicators. Charts also follow a similar default color scheme; they can be customized in the Settings pane. Threshold states are determined by a connected DashPad-API instance.</p>"},{"location":"web/#real-time-updates","title":"Real-Time Updates","text":"<p>The web interface intelligently polls the DashPad-API container based on <code>next_update_sec</code> hints provided by the API itself. This allows the frontend to adapt its polling frequency dynamically, reducing unnecessary network traffic and server load. Default polling intervals are:</p> <ul> <li> <p>Metrics: ~4 seconds</p> </li> <li> <p>Logs &amp; Alerts: ~30 seconds</p> </li> <li> <p>Cron Tasks: ~60 seconds</p> </li> </ul> <p>The minimum configurable interval for any data or module type is 2 seconds.</p>"},{"location":"web/#performance","title":"Performance","text":"<p>DashPad strives to be lightweight, making it ideal for older or resource-constrained devices.</p> <ul> <li> <p>Initial Load: The application has a small initial footprint, with a transfer size of under 1MB on first page load.</p> </li> <li> <p>Memory Usage: Active memory consumption of the DashPad-Web container is typically between 10-25MB (on the platform running the container). This is achieved by leveraging an in-memory browser store on the viewing device for historical data rather than a persistent database, which also means the dashboard must remain open to collect trend data.</p> </li> </ul>"},{"location":"web/#security","title":"Security","text":"<p>Security is a core design principle of the web container, handled primarily by the bundled NGINX proxy and the container's <code>startup.sh</code> script:</p> <ul> <li> <p>Proxy-Based Architecture: The web container is (currently) the only component that communicates with API containers. API keys are never sent to the browser. The NGINX proxy injects the required <code>X-API-Key</code> header for each request.</p> </li> <li> <p>Authentication: Access to the web interface is protected by basic authentication (<code>htpasswd</code>), configured via environment variables. This provides a simple but effective layer of security for access to the dashboard.</p> </li> <li> <p>Encryption: Communication is secured with HTTPS. The container generates a self-signed certificate at startup, and it can also validate DashPad-API server certificates via SSL fingerprinting.</p> </li> <li> <p>Masked URLs: To prevent exposing potentially sensitive information in the UI, server URLs are masked, showing only the first few characters of the hostname. Other information, including keywords and email, IP, &amp; MAC addresses, can be obfuscated within the log module, though this is an API container-based setting.</p> </li> </ul>"},{"location":"web/#deployment","title":"Deployment","text":"<p>The DashPad-Web container is designed to be deployed using Docker, and runs anywhere containers are supported. Unlike DashPad-API, the Web container does not need direct access to your monitored servers; it only requires network access to your DashPad-API container(s). This separation of concerns makes deployment flexible and secure.</p>"},{"location":"web/#cloud-deployment-google-cloud-run","title":"Cloud Deployment (Google Cloud Run)","text":"<p>In addition to local Docker deployments, DashPad-Web is fully compatible with serverless platforms like Google Cloud Run.</p> <p>By setting the container to \"request-based billing\" and permitting it to scale down to zero instances, you are only billed when the dashboard is actively being viewed. Performance testing shows that with request-based billing and minimal resource allocation (0.1 vCPU, 128MB RAM), the container operates with exceptional efficiency: continuous monitoring of two servers at default intervals costs less than $0.03 per day, with projected monthly costs under $1.00 and projected yearly costs under $10.00. This makes DashPad an extremely cost-effective solution for a \"publicly\" accessible, secure monitoring dashboard.</p> <p>As a reminder, the DashPad-API container must still be deployed on monitored servers so the Web container has a data source.</p>"},{"location":"web/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Configuration Guide: Learn how to set up and configure the web container.</p> </li> <li> <p>Usage Guide: Explore the features of the dashboard and settings panel.</p> </li> <li> <p>Troubleshooting Guide: Find solutions to common issues.</p> </li> </ul>"},{"location":"web/configuration/","title":"Configuration","text":"<p>This guide covers configuring the DashPad Web interface.</p>"},{"location":"web/configuration/#container-configuration","title":"Container Configuration","text":"<p>The Web container uses environment variables for configuration.</p>"},{"location":"web/configuration/#basic-configuration","title":"Basic Configuration","text":"Variable Description Example <code>LISTEN_PORT</code> NGINX listen port <code>5240</code> <code>USE_HTTPS</code> Enable HTTPS <code>true</code> <code>AUTH_USERNAME</code> Basic auth username <code>admin</code> <code>AUTH_PASSWORD</code> Basic auth password <code>secure-password</code> <code>SKIP_SSL_FINGERPRINT_VERIFICATION</code> Skip SSL verification <code>false</code>"},{"location":"web/configuration/#server-configuration","title":"Server Configuration","text":"<p>Servers are configured using numbered environment variables:</p> <p>Server 1: - <code>SERVER1_NAME</code> - Display name - <code>SERVER1_URL</code> - API URL (with https://) - <code>SERVER1_KEY</code> - 64-character API key - <code>SERVER1_SSLFINGERPRINT</code> - SSL certificate fingerprint</p> <p>Server 2: - <code>SERVER2_NAME</code> - Display name - <code>SERVER2_URL</code> - API URL - <code>SERVER2_KEY</code> - API key - <code>SERVER2_SSLFINGERPRINT</code> - SSL fingerprint</p> <p>Continue pattern for additional servers (SERVER3_, SERVER4_, etc.)</p>"},{"location":"web/configuration/#docker-compose-example","title":"Docker Compose Example","text":"<pre><code>version: '3.8'\n\nservices:\n  dashpad-web:\n    image: ghcr.io/mrchrisneal/dashpad-web:latest\n    ports:\n      - \"5240:5240\"\n    environment:\n      - LISTEN_PORT=5240\n      - USE_HTTPS=true\n      - AUTH_USERNAME=admin\n      - AUTH_PASSWORD=password\n\n      # Server 1\n      - SERVER1_NAME=Production\n      - SERVER1_URL=https://192.168.1.10:5241\n      - SERVER1_KEY=a4514a337c35c834dc4703f286efd90118aaa568bf324ffd7aedaeba61d7a679\n      - SERVER1_SSLFINGERPRINT=F0:B5:B7:98:59:35:42:4B:59:28:47:62:83:EB:BA:DD\n\n      # Server 2\n      - SERVER2_NAME=Development\n      - SERVER2_URL=https://192.168.1.20:5241\n      - SERVER2_KEY=b1b8908f1754f512e24f2355e405c73fc4ee85fdefae8674363e69bddc6d39b3\n      - SERVER2_SSLFINGERPRINT=4F:B4:5C:24:91:56:D5:B3:93:DE:53:DE:1B:95:4B:2E\n</code></pre>"},{"location":"web/configuration/#getting-api-keys-and-ssl-fingerprints","title":"Getting API Keys and SSL Fingerprints","text":"<ol> <li>Deploy the API container first</li> <li>Check API container logs for the generated API key and SSL fingerprint</li> <li>Use these values in the Web container configuration</li> </ol>"},{"location":"web/configuration/#user-interface-settings","title":"User Interface Settings","text":""},{"location":"web/configuration/#dashboard-layout","title":"Dashboard Layout","text":"<p>Configure through the Settings panel: - Columns: 1-4 based on screen size - Module Layout: Drag to reposition - Expand/Collapse: Individual module control</p>"},{"location":"web/configuration/#chart-settings","title":"Chart Settings","text":"<p>Duration Options: - Expanded charts: 5, 15, 30, or 60 minutes - Background sparklines: 5, 10, or 15 minutes</p> <p>Data Retention: - 15 minutes: Low-memory devices - 30 minutes: Tablets - 60 minutes: Default - 120 minutes: High-memory devices</p>"},{"location":"web/configuration/#module-specific-settings","title":"Module-Specific Settings","text":""},{"location":"web/configuration/#log-modules","title":"Log Modules","text":"<pre><code>{\n  \"autoscroll\": true,\n  \"highlightRules\": [\n    {\n      \"keyword\": \"error\",\n      \"color\": \"#ff4444\",\n      \"enabled\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"web/configuration/#metric-modules","title":"Metric Modules","text":"<ul> <li>Autoscale: Dynamic Y-axis</li> <li>Duration: Override global setting</li> </ul>"},{"location":"web/configuration/#alert-modules","title":"Alert Modules","text":"<ul> <li>Show past alerts</li> <li>Maximum alert history</li> </ul>"},{"location":"web/configuration/#security","title":"Security","text":""},{"location":"web/configuration/#https","title":"HTTPS","text":"<p>The container auto-generates self-signed certificates when <code>USE_HTTPS=true</code>.</p>"},{"location":"web/configuration/#basic-authentication","title":"Basic Authentication","text":"<p>Always configure authentication:</p> <pre><code>environment:\n  - AUTH_USERNAME=yourusername\n  - AUTH_PASSWORD=strongpassword\n</code></pre>"},{"location":"web/configuration/#ssl-verification","title":"SSL Verification","text":"<ul> <li>Set <code>SKIP_SSL_FINGERPRINT_VERIFICATION=false</code> for production</li> <li>Use <code>true</code> only for testing or if certificates change frequently</li> </ul>"},{"location":"web/configuration/#importexport","title":"Import/Export","text":""},{"location":"web/configuration/#export-settings","title":"Export Settings","text":"<ol> <li>Open Settings \u2192 Import/Export</li> <li>Click \"Export Configuration\"</li> <li>Save JSON file</li> </ol>"},{"location":"web/configuration/#import-settings","title":"Import Settings","text":"<ol> <li>Open Settings \u2192 Import/Export</li> <li>Select saved JSON</li> <li>Click \"Import Configuration\"</li> </ol>"},{"location":"web/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"web/configuration/#servers-not-appearing","title":"Servers Not Appearing","text":"<p>Check environment variables are set correctly: - Each server needs all 4 variables (NAME, URL, KEY, SSLFINGERPRINT) - URLs must include protocol (https://) - API keys must be exactly 64 characters</p>"},{"location":"web/configuration/#connection-issues","title":"Connection Issues","text":"<ul> <li>Verify API containers are running</li> <li>Check firewall rules</li> <li>Confirm SSL fingerprints match</li> <li>Test with <code>SKIP_SSL_FINGERPRINT_VERIFICATION=true</code></li> </ul>"},{"location":"web/configuration/#best-practices","title":"Best Practices","text":"<ul> <li>Always use HTTPS in production</li> <li>Configure strong passwords</li> <li>Keep SSL fingerprint verification enabled</li> <li>Regular configuration backups</li> </ul>"},{"location":"web/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>API Configuration - Backend setup</li> <li>Docker Deployment - Local deployment</li> </ul>"},{"location":"web/quick-start/","title":"Quick Start","text":"<p>This guide will walk you through the fastest way to get the DashPad-Web interface up and running using Docker Compose on your local server.</p>"},{"location":"web/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, please ensure you have the following:</p> <ol> <li> <p>Docker and Docker Compose: You must have a working installation of Docker (and ideally Docker Compose) on your system.</p> </li> <li> <p>A Running DashPad-API Instance: This guide assumes you have at least one <code>DashPad-API</code> container running and accessible on your network. </p> </li> </ol> <p>Is DashPad-API Running?</p> <p>If you haven't set up or started at least one instance of <code>DashPad-API</code> yet, please follow the DashPad-API documentation before continuing.</p>"},{"location":"web/quick-start/#step-1-create-the-docker-compose-file","title":"Step 1: Create the Docker Compose File","text":"<p>Oreate a new file named <code>docker-compose.yml</code> and paste the following content into it. This file defines the DashPad-Web service and all the necessary configurations.</p> LinuxunRAID <pre><code># TODO: Update the image URL below once it is published on GitHub.\n# For now, this assumes you have built the image locally.\nversion: '3.8'\n\nservices:\n  dashpad-web:\n    image: dashpad-web:latest\n    container_name: dashpad-web\n    ports:\n      - \"5240:5240\" \n    # TODO: Update port numbers\n    # The 'volumes' section maps a host directory to a directory inside the container.\n    # It is highly recommended for performance, as it caches SSL certificates.\n    volumes:\n      - ./dashpad-data:/data\n    environment:\n      # --- Web Interface Authentication ---\n      - AUTH_USERNAME=username\n      - AUTH_PASSWORD=password\n\n      # --- API Server Configuration ---\n      - SERVER1_NAME=my-server\n      - SERVER1_URL=https://&lt;REPLACE_WITH_API_IP&gt;:&lt;REPLACE_WITH_API_PORT&gt;\n      - SERVER1_KEY=&lt;REPLACE_WITH_YOUR_64_CHARACTER_API_KEY&gt;\n\n      # To add more servers, copy the three lines above and increment the number.\n      # For example, for a second server, you would add:\n      # - SERVER2_NAME=another-server\n      # - SERVER2_URL=https://&lt;IP_OF_SECOND_SERVER&gt;:&lt;PORT&gt;\n      # - SERVER2_KEY=&lt;API_KEY_FOR_SECOND_SERVER&gt;\n\n      # --- Security Settings for Quick Start ---\n      # TODO: This variable is used to bypass a buggy SSL fingerprinting feature.\n      # The underlying bugs should be addressed in a future version.\n      - SKIP_SSL_FINGERPRINT_VERIFICATION=true\n    restart: unless-stopped\n</code></pre> <pre><code># TODO: Update the image URL below once it is published on GitHub.\n# For now, this assumes you have built the image locally.\nversion: '3.8'\n\nservices:\n  dashpad-web:\n    image: dashpad-web:latest\n    container_name: dashpad-web\n    ports:\n      - \"5240:5240\"\n    # TODO: Update port numbers\n    # The 'volumes' section maps a host directory to a directory inside the container.\n    # It is highly recommended for performance, as it caches SSL certificates.\n    volumes:\n      - /mnt/user/appdata/dashpad-web:/data\n    environment:\n      # --- Web Interface Authentication ---\n      - AUTH_USERNAME=username\n      - AUTH_PASSWORD=password\n\n      # --- API Server Configuration ---\n      - SERVER1_NAME=my-server\n      - SERVER1_URL=https://&lt;REPLACE_WITH_API_IP&gt;:&lt;REPLACE_WITH_API_PORT&gt;\n      - SERVER1_KEY=&lt;REPLACE_WITH_YOUR_64_CHARACTER_API_KEY&gt;\n\n      # To add more servers, copy the three lines above and increment the number.\n      # For example, for a second server, you would add:\n      # - SERVER2_NAME=another-server\n      # - SERVER2_URL=https://&lt;IP_OF_SECOND_SERVER&gt;:&lt;PORT&gt;\n      # - SERVER2_KEY=&lt;API_KEY_FOR_SECOND_SERVER&gt;\n\n      # --- Security Settings for Quick Start ---\n      # TODO: This variable is used to bypass a buggy SSL fingerprinting feature.\n      # The underlying bugs should be addressed in a future version.\n      - SKIP_SSL_FINGERPRINT_VERIFICATION=true\n    restart: unless-stopped\n</code></pre>"},{"location":"web/quick-start/#step-2-configure-your-server","title":"Step 2: Configure Your Server","text":"<p>You only need to change two lines in the <code>environment</code> section of the <code>docker-compose.yml</code> file you just created:</p> <ol> <li> <p><code>SERVER1_URL</code>: Replace <code>&lt;REPLACE_WITH_API_IP&gt;:&lt;REPLACE_WITH_API_PORT&gt;</code> with the actual HTTPS URL of your running <code>DashPad-API</code> instance.</p> </li> <li> <p><code>SERVER1_KEY</code>: Replace <code>&lt;REPLACE_WITH_YOUR_64_CHARACTER_API_KEY&gt;</code> with the API key provided by your <code>DashPad-API</code> container.</p> </li> </ol> <p>Persistent vs. Ephemeral Storage</p> <p>The volumes section in the docker-compose.yml is highly recommended but optional.</p> <p>With a volume (Recommended): SSL certificates from your API servers are cached in the dashpad-data directory. This makes container restarts much faster.</p> <p>Without a volume: The container will run in \"ephemeral mode\" and re-download all certificates on every restart. You will see a warning in the logs if this happens.</p> <p>Security Notice: SSL Verification</p> <p>For this quick start, we are setting <code>SKIP_SSL_FINGERPRINT_VERIFICATION</code> to <code>true</code>. This simplifies the initial setup but is not recommended for production. </p> <p>Once your dashboard is running, you should disable this option and provide the correct <code>SERVER1_SSLFINGERPRINT</code> for each server to ensure you are connecting to the correct, trusted API endpoint.</p>"},{"location":"web/quick-start/#step-3-launch-the-container","title":"Step 3: Launch the Container","text":"<p>Save the changes to your <code>docker-compose.yml</code> file. Now, open a terminal in the same directory and run the following command:</p> <pre><code>docker compose up -d\n</code></pre> <p>Docker will now pull (or use the local) image, create the container, and start the DashPad-Web service in the background. If you included the volumes section, it will also create a dashpad-data directory in the same folder to store SSL certificate data.</p>"},{"location":"web/quick-start/#step-4-access-your-dashboard","title":"Step 4: Access Your Dashboard","text":"<p>Once the container is running, open your web browser and navigate to:</p> <p><code>http://&lt;your_docker_host_ip&gt;:5240</code></p>"},{"location":"web/quick-start/#todo-update-port-numbers","title":"TODO: Update port numbers","text":"<p>You will be prompted for a username and password. Use the credentials you specified in the <code>docker-compose.yml</code> file.</p> <p>You should now see the DashPad dashboard, and it will begin populating with data from your API server!</p>"},{"location":"web/quick-start/#next-steps","title":"Next Steps","text":"<p>This guide covers the most basic setup. To learn about all the available environment variables, including how to add more servers, configure HTTPS, and enable proper SSL fingerprinting, please see the full Configuration Guide.</p>"},{"location":"web/deployment/cloud-run/","title":"Deployment - Google Cloud Run","text":"<p>Deploy the DashPad-Web container to Google Cloud Run for cloud-based dashboard access.</p>"},{"location":"web/deployment/cloud-run/#important-note","title":"Important Note","text":"<p>\u26a0\ufe0f Only the Web container can be deployed to Cloud Run. The API container must run on your actual servers because it needs direct filesystem access.</p>"},{"location":"web/deployment/cloud-run/#prerequisites","title":"Prerequisites","text":"<ul> <li>Google Cloud account with billing enabled</li> <li><code>gcloud</code> CLI installed</li> <li>API containers running on your servers</li> <li>Domain name (optional)</li> </ul>"},{"location":"web/deployment/cloud-run/#deployment-steps","title":"Deployment Steps","text":""},{"location":"web/deployment/cloud-run/#1-set-up-project","title":"1. Set Up Project","text":"<pre><code># Set project variables\nexport PROJECT_ID=\"your-project-id\"\nexport REGION=\"us-central1\"\n\n# Enable required APIs\ngcloud services enable run.googleapis.com\n</code></pre>"},{"location":"web/deployment/cloud-run/#2-build-and-deploy-web-container","title":"2. Build and Deploy Web Container","text":"<pre><code># Clone repository\ngit clone https://github.com/mrchrisneal/DashPad-Web\ncd DashPad-Web\n\n# Build and submit to Cloud Build\ngcloud builds submit --tag gcr.io/$PROJECT_ID/dashpad-web\n\n# Deploy to Cloud Run\ngcloud run deploy dashpad-web \\\n  --image gcr.io/$PROJECT_ID/dashpad-web \\\n  --platform managed \\\n  --region $REGION \\\n  --allow-unauthenticated \\\n  --port 80 \\\n  --set-env-vars \"DASHPAD_SERVERS=http://your-server:8000|Server Name\"\n</code></pre>"},{"location":"web/deployment/cloud-run/#3-configure-environment-variables","title":"3. Configure Environment Variables","text":"<p>Set your server configurations when deploying:</p> <pre><code># Single server\ngcloud run deploy dashpad-web \\\n  --set-env-vars \"LISTEN_PORT=443,USE_HTTPS=true,AUTH_USERNAME=admin,AUTH_PASSWORD=password,SERVER1_NAME=Home Server,SERVER1_URL=https://your-server:5241,SERVER1_KEY=your-api-key,SERVER1_SSLFINGERPRINT=your-ssl-fingerprint\"\n\n# Multiple servers\ngcloud run deploy dashpad-web \\\n  --set-env-vars \"LISTEN_PORT=443,USE_HTTPS=true,AUTH_USERNAME=admin,AUTH_PASSWORD=password,SERVER1_NAME=Server 1,SERVER1_URL=https://server1:5241,SERVER1_KEY=key1,SERVER1_SSLFINGERPRINT=fp1,SERVER2_NAME=Server 2,SERVER2_URL=https://server2:5241,SERVER2_KEY=key2,SERVER2_SSLFINGERPRINT=fp2\"\n</code></pre>"},{"location":"web/deployment/cloud-run/#custom-domain-optional","title":"Custom Domain (Optional)","text":"<p>Map a custom domain:</p> <pre><code>gcloud run domain-mappings create \\\n  --service dashpad-web \\\n  --domain your-domain.com \\\n  --region $REGION\n</code></pre> <p>Update DNS records as instructed.</p>"},{"location":"web/deployment/cloud-run/#security-considerations","title":"Security Considerations","text":""},{"location":"web/deployment/cloud-run/#api-access","title":"API Access","text":"<p>Your API containers must be accessible from Cloud Run: - Use public IPs with strong API keys - Set up Cloud VPN for private access - Use a reverse proxy with authentication</p>"},{"location":"web/deployment/cloud-run/#authentication","title":"Authentication","text":"<p>The Web container includes basic authentication:</p> <pre><code>--set-env-vars \"AUTH_USERNAME=admin,AUTH_PASSWORD=secure-password\"\n</code></pre> <p>API authentication is handled via individual API keys per server.</p>"},{"location":"web/deployment/cloud-run/#cost-optimization","title":"Cost Optimization","text":"<p>Cloud Run bills per request and compute time: - Set minimum instances to 0 - Use appropriate memory allocation (128MB usually sufficient) - Consider using Cloud CDN for static assets</p> <p>Typical cost: ~$0.35/month for light usage</p>"},{"location":"web/deployment/cloud-run/#updating","title":"Updating","text":"<p>To update the deployed container:</p> <pre><code># Rebuild and deploy\ngcloud builds submit --tag gcr.io/$PROJECT_ID/dashpad-web\ngcloud run deploy dashpad-web --image gcr.io/$PROJECT_ID/dashpad-web\n</code></pre>"},{"location":"web/deployment/cloud-run/#next-steps","title":"Next Steps","text":"<ul> <li>Ensure your API containers are accessible</li> <li>Configure authentication on both API and Web</li> <li>Set up monitoring for the Cloud Run service</li> </ul>"},{"location":"devlog/archive/2025/","title":"2025","text":""},{"location":"devlog/category/devlog/","title":"devlog","text":""}]}